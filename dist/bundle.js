!function(e){var t={};function o(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,o),i.l=!0,i.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)o.d(n,i,function(t){return e[t]}.bind(null,i));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=4)}([function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GAME_CONFIG={CELL_SIZE:40,BACKGROUND_COLOR:"#28363B",STROKE_COLOR:"black",SHAPE_COLORS:["#F9B38F","#BF6C86","#84AF9C","#6D5C80","#FFA3D0","#439F9E","#EF5F3C"],FONT:"20px Arial",FONT_COLOR:"white",SCORE_POSITION:{X:10,Y:25},LEFT_KEY:37,RIGHT_KEY:39,UP_KEY:38,DOWN_KEY:40,DROP:13}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){var e=this;this.keysPressed=[],document.addEventListener("keydown",function(t){e.keyDown(t)})}return e.prototype.keyDown=function(e){this.keysPressed[e.keyCode]=!0},e.prototype.reset=function(){this.keysPressed=[]},e.prototype.isPressed=function(e){return this.keysPressed[e]},e}();t.keyboard=new n},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){this._x=e,this._y=t}return Object.defineProperty(e.prototype,"X",{get:function(){return this._x},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"Y",{get:function(){return this._y},enumerable:!0,configurable:!0}),Object.defineProperty(e,"Zero",{get:function(){return new e(0,0)},enumerable:!0,configurable:!0}),e.prototype.addX=function(t){return new e(this._x,this._y).addToX(t)},e.prototype.addY=function(t){return new e(this._x,this._y).addToY(t)},e.prototype.addToX=function(e){return this._x+=e,this},e.prototype.addToY=function(e){return this._y+=e,this},e.prototype.add=function(e,t){this.addToX(e),this.addToY(t)},e}();t.Vector2=n},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=o(2),i=function(){function e(e){this._canvas=e,this._context=this._canvas.getContext("2d")}return Object.defineProperty(e.prototype,"Width",{get:function(){return this._canvas.width},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"Height",{get:function(){return this._canvas.height},enumerable:!0,configurable:!0}),e.prototype.clear=function(){this._context.clearRect(0,0,this._canvas.width,this._canvas.height)},e.prototype.drawBackground=function(e){this._context.save(),this._context.fillStyle=e,this._context.fillRect(0,0,this._canvas.width,this._canvas.height),this._context.restore()},e.prototype.drawRect=function(e,t,o,n,i){this._context.save(),this._context.strokeStyle=o,this._context.fillStyle=t,this._context.fillRect(e.X,e.Y,n,i),this._context.strokeRect(e.X,e.Y,n,i),this._context.restore()},e.prototype.drawText=function(e,t,o,n){this._context.save(),this._context.fillStyle=o,this._context.font=t,this._context.fillText(e,n.X,n.Y),this._context.restore()},e.prototype.drawRectAtCell=function(e,t,o,i,r){this.drawRect(new n.Vector2(t*r,e*r),o,i,r,r)},e}(),r=document.getElementById("screen");t.canvas2D=new i(r)},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,i=o(5),r=o(1),a=o(3),h=o(0),s=a.canvas2D.Width/h.GAME_CONFIG.CELL_SIZE,c=a.canvas2D.Height/h.GAME_CONFIG.CELL_SIZE;function p(){n.update(),r.keyboard.reset(),a.canvas2D.clear(),a.canvas2D.drawBackground(h.GAME_CONFIG.BACKGROUND_COLOR),n.draw(),requestAnimationFrame(p)}n=new i.GameWorld(s,c),p()},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=o(0),i=o(1),r=o(2),a=o(3),h=o(6),s=o(7),c=function(){function e(e,t){this._updateEveryXFrames=20,this._frame=0,this._movingShape=[],this._score=0,this._shapeTypes=[s.ShapeType.I,s.ShapeType.J,s.ShapeType.L,s.ShapeType.O,s.ShapeType.S,s.ShapeType.Z,s.ShapeType.T],this._width=e,this._height=t,this.initMap(),this.generateRandomShape()}return Object.defineProperty(e.prototype,"gameOver",{get:function(){return this._gameOver},enumerable:!0,configurable:!0}),e.prototype.initMap=function(){this._map=[];for(var e=0;e<this._height;e++){this._map[e]=[];for(var t=0;t<this._width;t++)this._map[e][t]=new h.Cell}},e.prototype.isCellFilled=function(e,t){return this.isInMap(e,t)&&this._map[t][e].filled},e.prototype.clearCell=function(e,t){this.isInMap(e,t)&&(this._map[t][e].filled=!1)},e.prototype.isInMap=function(e,t){return e>=0&&e<this._width&&t>=0&&t<this._height},e.prototype.colorCell=function(e,t,o){this.isInMap(e,t)&&(this._map[t][e].filled=!0,this._map[t][e].color=o)},e.prototype.isPartOfShape=function(e,t){return t.some(function(t){return t.X===e.X&&t.Y===e.Y})},e.prototype.increaseScore=function(){this._score+=this._width},e.prototype.dropShape=function(){for(;!this.lowerShape(););},e.prototype.handleInput=function(){var e=this,t=0;(i.keyboard.isPressed(n.GAME_CONFIG.DROP)?this.dropShape():i.keyboard.isPressed(n.GAME_CONFIG.UP_KEY)?this.rotateShape():i.keyboard.isPressed(n.GAME_CONFIG.DOWN_KEY)?this.lowerShape():i.keyboard.isPressed(n.GAME_CONFIG.LEFT_KEY)?t=-1:i.keyboard.isPressed(n.GAME_CONFIG.RIGHT_KEY)&&(t=1),0!==t)&&(this._movingShape.some(function(o){var n=o.X+t,i=e.isPartOfShape(o.addX(t),e._movingShape);return n<0||n===e._width||e.isCellFilled(n,o.Y)&&!i})||(this._movingShape.forEach(function(o){e.clearCell(o.X,o.Y),o.addToX(t)}),this._movingShapeOrigin&&this._movingShapeOrigin.addToX(t),this._movingShape.forEach(function(t){e.colorCell(t.X,t.Y,e._movingShapeColor)})))},e.prototype.rotateShape=function(){var e=this;if(this._movingShapeOrigin){for(var t=[],o=0;o<this._movingShape.length;o++){var n=this._movingShape[o],i=n.X-this._movingShapeOrigin.X,r=-(n.Y-this._movingShapeOrigin.Y),a=i,h=this._movingShapeOrigin.addX(r).addY(a);t.push(h)}t.every(function(t){var o=e.isPartOfShape(t,e._movingShape);return t.Y>=0&&t.X>=0&&t.X<e._width&&(!e.isCellFilled(t.X,t.Y)||o)})&&(this._movingShape.forEach(function(t){e.clearCell(t.X,t.Y)}),this._movingShape=t,this._movingShape.forEach(function(t){e.colorCell(t.X,t.Y,e._movingShapeColor)}))}},e.prototype.lowerShape=function(){var e=this,t=this._movingShape.some(function(t){var o=t.Y+1,n=e.isPartOfShape(t.addY(1),e._movingShape);return o===e._height||e.isCellFilled(t.X,o)&&!n});return t||(this._movingShape.forEach(function(t){e.clearCell(t.X,t.Y),t.addToY(1)}),this._movingShapeOrigin&&this._movingShapeOrigin.addToY(1),this._movingShape.forEach(function(t){e.colorCell(t.X,t.Y,e._movingShapeColor)})),t},e.prototype.handleFilledLines=function(){for(var e=0;e<this._map.length;e++){if(this._map[e].every(function(e){return e.filled})){this._map.splice(e,1);for(var t=[],o=0;o<this._width;o++)t[o]=new h.Cell;this._map.unshift(t),this.increaseScore(),this._updateEveryXFrames>0&&this._updateEveryXFrames--}}},e.prototype.checkForGameOver=function(){return this._map[0].some(function(e){return e.filled})},e.prototype.addShape=function(e){var t,o,i=this;switch(this._movingShape=[],e){case s.ShapeType.I:t=Math.floor(Math.random()*this._width),o=new r.Vector2(t,-4),this._movingShape=[new r.Vector2(o.X,o.Y),new r.Vector2(o.X,o.Y+1),new r.Vector2(o.X,o.Y+2),new r.Vector2(o.X,o.Y+3)],this._movingShapeOrigin=new r.Vector2(o.X,o.Y+1);break;case s.ShapeType.J:t=Math.floor(Math.random()*(this._width-1))+1,o=new r.Vector2(t,-4),this._movingShape=[new r.Vector2(o.X,o.Y),new r.Vector2(o.X,o.Y+1),new r.Vector2(o.X,o.Y+2),new r.Vector2(o.X-1,o.Y+2)],this._movingShapeOrigin=new r.Vector2(o.X,o.Y+1);break;case s.ShapeType.L:t=Math.floor(Math.random()*(this._width-1)),o=new r.Vector2(t,-4),this._movingShape=[new r.Vector2(o.X,o.Y),new r.Vector2(o.X,o.Y+1),new r.Vector2(o.X,o.Y+2),new r.Vector2(o.X+1,o.Y+2)],this._movingShapeOrigin=new r.Vector2(o.X,o.Y+1);break;case s.ShapeType.O:t=Math.floor(Math.random()*(this._width-1)),o=new r.Vector2(t,-4),this._movingShape=[new r.Vector2(o.X,o.Y),new r.Vector2(o.X+1,o.Y),new r.Vector2(o.X,o.Y+1),new r.Vector2(o.X+1,o.Y+1)],this._movingShapeOrigin=null;break;case s.ShapeType.S:t=Math.floor(Math.random()*(this._width-2))+1,o=new r.Vector2(t,-4),this._movingShape=[new r.Vector2(o.X,o.Y),new r.Vector2(o.X+1,o.Y),new r.Vector2(o.X,o.Y+1),new r.Vector2(o.X-1,o.Y+1)],this._movingShapeOrigin=new r.Vector2(o.X,o.Y+1);break;case s.ShapeType.Z:t=Math.floor(Math.random()*(this._width-2))+1,o=new r.Vector2(t,-4),this._movingShape=[new r.Vector2(o.X,o.Y),new r.Vector2(o.X-1,o.Y),new r.Vector2(o.X,o.Y+1),new r.Vector2(o.X+1,o.Y+1)],this._movingShapeOrigin=new r.Vector2(o.X,o.Y+1);break;case s.ShapeType.T:t=Math.floor(Math.random()*(this._width-2))+1,o=new r.Vector2(t,-4),this._movingShape=[new r.Vector2(o.X,o.Y),new r.Vector2(o.X,o.Y+1),new r.Vector2(o.X-1,o.Y+1),new r.Vector2(o.X+1,o.Y+1)],this._movingShapeOrigin=new r.Vector2(o.X,o.Y+1)}var a=this._shapeTypes.indexOf(e);this._movingShapeColor=n.GAME_CONFIG.SHAPE_COLORS[a],this._movingShape.forEach(function(e){i.colorCell(e.X,e.Y,i._movingShapeColor)})},e.prototype.generateRandomShape=function(){var e=Math.floor(Math.random()*this._shapeTypes.length);this.addShape(this._shapeTypes[e])},e.prototype.update=function(){(this.handleInput(),++this._frame%this._updateEveryXFrames)||this.lowerShape()&&(this.handleFilledLines(),this.checkForGameOver()?this._gameOver=!0:this.generateRandomShape())},e.prototype.drawScore=function(){a.canvas2D.drawText("Score: "+this._score.toString(),n.GAME_CONFIG.FONT,n.GAME_CONFIG.FONT_COLOR,n.GAME_CONFIG.SCORE_POSITION)},e.prototype.draw=function(){for(var e=0;e<this._map.length;e++)for(var t=0;t<this._map[e].length;t++){var o=this._map[e][t];o.filled&&a.canvas2D.drawRectAtCell(e,t,o.color,n.GAME_CONFIG.STROKE_COLOR,n.GAME_CONFIG.CELL_SIZE)}this.drawScore()},e}();t.GameWorld=c},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this._filled=!1}return Object.defineProperty(e.prototype,"color",{get:function(){return this._color},set:function(e){this._color=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"filled",{get:function(){return this._filled},set:function(e){this._filled=e},enumerable:!0,configurable:!0}),e}();t.Cell=n},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.I=0]="I",e[e.J=1]="J",e[e.L=2]="L",e[e.S=3]="S",e[e.Z=4]="Z",e[e.O=5]="O",e[e.T=6]="T"}(t.ShapeType||(t.ShapeType={}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dhbWUuY29uZmlnLnRzIiwid2VicGFjazovLy8uL3NyYy9pbnB1dC9LZXlib2FyZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2VvbS9WZWN0b3IyLnRzIiwid2VicGFjazovLy8uL3NyYy9DYW52YXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0dhbWUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0dhbWVXb3JsZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFwL0NlbGwudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NoYXBlVHlwZS9TaGFwZVR5cGUudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJHQU1FX0NPTkZJRyIsIkNFTExfU0laRSIsIkJBQ0tHUk9VTkRfQ09MT1IiLCJTVFJPS0VfQ09MT1IiLCJTSEFQRV9DT0xPUlMiLCJGT05UIiwiRk9OVF9DT0xPUiIsIlNDT1JFX1BPU0lUSU9OIiwiWCIsIlkiLCJMRUZUX0tFWSIsIlJJR0hUX0tFWSIsIlVQX0tFWSIsIkRPV05fS0VZIiwiRFJPUCIsIktleWJvYXJkIiwiX3RoaXMiLCJ0aGlzIiwia2V5c1ByZXNzZWQiLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwia2V5RG93biIsImV2ZW50Iiwia2V5Q29kZSIsInJlc2V0IiwiaXNQcmVzc2VkIiwia2V5Ym9hcmQiLCJWZWN0b3IyIiwieCIsInkiLCJfeCIsIl95IiwiYWRkWCIsImFkZFRvWCIsImFkZFkiLCJhZGRUb1kiLCJhZGQiLCJWZWN0b3IyXzEiLCJDYW52YXMyRCIsImNhbnZhcyIsIl9jYW52YXMiLCJfY29udGV4dCIsImdldENvbnRleHQiLCJ3aWR0aCIsImhlaWdodCIsImNsZWFyIiwiY2xlYXJSZWN0IiwiZHJhd0JhY2tncm91bmQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJzYXZlIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJyZXN0b3JlIiwiZHJhd1JlY3QiLCJwb3NpdGlvbiIsImZpbGxDb2xvciIsInN0cm9rZUNvbG9yIiwic3Ryb2tlU3R5bGUiLCJzdHJva2VSZWN0IiwiZHJhd1RleHQiLCJ0ZXh0IiwiZm9udCIsImNvbG9yIiwiZmlsbFRleHQiLCJkcmF3UmVjdEF0Q2VsbCIsImoiLCJjZWxsU2l6ZSIsImdldEVsZW1lbnRCeUlkIiwiY2FudmFzMkQiLCJtYXAiLCJHYW1lV29ybGRfMSIsIktleWJvYXJkXzEiLCJDYW52YXNfMSIsImdhbWVfY29uZmlnXzEiLCJnYW1lV2lkdGgiLCJXaWR0aCIsImdhbWVIZWlnaHQiLCJIZWlnaHQiLCJnYW1lTG9vcCIsInVwZGF0ZSIsImRyYXciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJHYW1lV29ybGQiLCJDZWxsXzEiLCJTaGFwZVR5cGVfMSIsIl91cGRhdGVFdmVyeVhGcmFtZXMiLCJfZnJhbWUiLCJfbW92aW5nU2hhcGUiLCJfc2NvcmUiLCJfc2hhcGVUeXBlcyIsIlNoYXBlVHlwZSIsIkkiLCJKIiwiTCIsIk8iLCJTIiwiWiIsIlQiLCJfd2lkdGgiLCJfaGVpZ2h0IiwiaW5pdE1hcCIsImdlbmVyYXRlUmFuZG9tU2hhcGUiLCJfZ2FtZU92ZXIiLCJfbWFwIiwiQ2VsbCIsImlzQ2VsbEZpbGxlZCIsImlzSW5NYXAiLCJmaWxsZWQiLCJjbGVhckNlbGwiLCJjb2xvckNlbGwiLCJpc1BhcnRPZlNoYXBlIiwiY2VsbCIsInNoYXBlIiwic29tZSIsInNoYXBlQ2VsbCIsImluY3JlYXNlU2NvcmUiLCJkcm9wU2hhcGUiLCJsb3dlclNoYXBlIiwiaGFuZGxlSW5wdXQiLCJ0b01vdmVYIiwicm90YXRlU2hhcGUiLCJuZXh0WCIsInBhcnRPZlNoYXBlIiwiZm9yRWFjaCIsIl9tb3ZpbmdTaGFwZU9yaWdpbiIsIl9tb3ZpbmdTaGFwZUNvbG9yIiwibmV3U2hhcGUiLCJsZW5ndGgiLCJuZXdYIiwibmV3WSIsIm5ld0NlbGwiLCJwdXNoIiwiZXZlcnkiLCJyZWFjaGVkQm90dG9tIiwibmV4dFkiLCJoYW5kbGVGaWxsZWRMaW5lcyIsInNwbGljZSIsIm5ld1JvdyIsInVuc2hpZnQiLCJjaGVja0ZvckdhbWVPdmVyIiwiYWRkU2hhcGUiLCJzaGFwZVR5cGUiLCJyYW5kb21YIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwic2hhcGVUeXBlSW5kZXgiLCJpbmRleE9mIiwicmFuZG9tU2hhcGVUeXBlSW5kZXgiLCJkcmF3U2NvcmUiLCJ0b1N0cmluZyIsIl9maWxsZWQiLCJfY29sb3IiLCJ2Il0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsR0FBQSxDQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFFBQUEsSUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsRUFBQSxDQUEwQ0ssWUFBQSxFQUFBQyxJQUFBTCxLQUsxQ1os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bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA0KTtcbiIsImV4cG9ydCBjb25zdCBHQU1FX0NPTkZJRyA6IGFueSA9IHtcblxuICAgIC8vIFBIWVNJQ1NcblxuICAgIC8vIFNJWklOR1xuICAgIENFTExfU0laRTogNDAsXG5cbiAgICAvLyBDT0xPUlNcbiAgICBCQUNLR1JPVU5EX0NPTE9SOiAnIzI4MzYzQicsXG4gICAgU1RST0tFX0NPTE9SOiAnYmxhY2snLFxuICAgIFNIQVBFX0NPTE9SUzogW1wiI0Y5QjM4RlwiLCBcIiNCRjZDODZcIiwgXCIjODRBRjlDXCIsIFwiIzZENUM4MFwiLCBcIiNGRkEzRDBcIiwgXCIjNDM5RjlFXCIsIFwiI0VGNUYzQ1wiXSxcbiAgICBcbiAgICAvLyBURVhUXG4gICAgRk9OVDogJzIwcHggQXJpYWwnLCAgICBcbiAgICBGT05UX0NPTE9SOiAnd2hpdGUnLFxuXG4gICAgLy8gUE9TSVRJT05TXG4gICAgU0NPUkVfUE9TSVRJT046IHtYOiAxMCwgWTogMjV9LFxuXG4gICAgLy8gS0VZU1xuICAgIExFRlRfS0VZOiAzNyxcbiAgICBSSUdIVF9LRVk6IDM5LFxuICAgIFVQX0tFWTogMzgsXG4gICAgRE9XTl9LRVk6IDQwLFxuICAgIERST1A6IDEzXG59O1xuIiwiXG5jbGFzcyBLZXlib2FyZCB7XG5cbiAgICBrZXlzUHJlc3NlZCA6IGJvb2xlYW5bXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZSkgPT4ge3RoaXMua2V5RG93bihlKSB9KTtcbiAgICB9XG5cbiAgICBrZXlEb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgICAgIHRoaXMua2V5c1ByZXNzZWRbZXZlbnQua2V5Q29kZV0gPSB0cnVlO1xuICAgIH1cblxuICAgIHJlc2V0KCkgOiB2b2lkIHtcbiAgICAgICAgdGhpcy5rZXlzUHJlc3NlZCA9IFtdO1xuICAgIH1cblxuICAgIGlzUHJlc3NlZChrZXlDb2RlOiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMua2V5c1ByZXNzZWRba2V5Q29kZV07XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3Qga2V5Ym9hcmQgPSBuZXcgS2V5Ym9hcmQoKTsiLCJcbmV4cG9ydCBjbGFzcyBWZWN0b3IyIHtcbiAgICBwcml2YXRlIF94OiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfeTogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5feCA9IHg7XG4gICAgICAgIHRoaXMuX3kgPSB5O1xuICAgIH1cblxuICAgIGdldCBYKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5feDtcbiAgICB9XG4gICAgXG4gICAgZ2V0IFkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl95O1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgWmVybygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKDAsIDApO1xuICAgIH1cblxuICAgIGFkZFgoeDogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMih0aGlzLl94LCB0aGlzLl95KS5hZGRUb1goeCk7XG4gICAgfVxuXG4gICAgYWRkWSh5OiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKHRoaXMuX3gsIHRoaXMuX3kpLmFkZFRvWSh5KTtcbiAgICB9XG5cbiAgICBhZGRUb1goeDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX3ggKz0geDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgYWRkVG9ZKHk6IG51bWJlcikge1xuICAgICAgICB0aGlzLl95ICs9IHk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGFkZCh4IDogbnVtYmVyLCB5OiBudW1iZXIpIDogdm9pZHtcbiAgICAgICAgdGhpcy5hZGRUb1goeCk7XG4gICAgICAgIHRoaXMuYWRkVG9ZKHkpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBHQU1FX0NPTkZJRyB9IGZyb20gJy4vZ2FtZS5jb25maWcnO1xuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4vZ2VvbS9WZWN0b3IyJztcblxuY2xhc3MgQ2FudmFzMkQge1xuXG4gICAgcHJpdmF0ZSBfY2FudmFzIDogSFRNTENhbnZhc0VsZW1lbnQ7XG4gICAgcHJpdmF0ZSBfY29udGV4dCA6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcblxuICAgIGNvbnN0cnVjdG9yKGNhbnZhcyA6IEhUTUxDYW52YXNFbGVtZW50KSB7XG4gICAgICAgIHRoaXMuX2NhbnZhcyA9IGNhbnZhcztcbiAgICAgICAgdGhpcy5fY29udGV4dCA9IHRoaXMuX2NhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIH1cblxuICAgIGdldCBXaWR0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhbnZhcy53aWR0aDtcbiAgICB9XG4gICAgXG4gICAgZ2V0IEhlaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhbnZhcy5oZWlnaHQ7XG4gICAgfVxuXG4gICAgY2xlYXIoKSA6IHZvaWQge1xuICAgICAgICB0aGlzLl9jb250ZXh0LmNsZWFyUmVjdCgwLCAwLCB0aGlzLl9jYW52YXMud2lkdGgsIHRoaXMuX2NhbnZhcy5oZWlnaHQpO1xuICAgIH1cblxuICAgIGRyYXdCYWNrZ3JvdW5kKGJhY2tncm91bmRDb2xvcjogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuc2F2ZSgpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmZpbGxTdHlsZSA9IGJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgdGhpcy5fY29udGV4dC5maWxsUmVjdCgwLCAwLCB0aGlzLl9jYW52YXMud2lkdGgsIHRoaXMuX2NhbnZhcy5oZWlnaHQpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LnJlc3RvcmUoKTtcbiAgICB9XG5cbiAgICBkcmF3UmVjdChwb3NpdGlvbjogVmVjdG9yMiwgZmlsbENvbG9yOiBzdHJpbmcsIHN0cm9rZUNvbG9yOiBzdHJpbmcsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSA6IHZvaWQge1xuICAgICAgICB0aGlzLl9jb250ZXh0LnNhdmUoKTtcbiAgICAgICAgdGhpcy5fY29udGV4dC5zdHJva2VTdHlsZSA9IHN0cm9rZUNvbG9yO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmZpbGxTdHlsZSA9IGZpbGxDb2xvcjtcbiAgICAgICAgdGhpcy5fY29udGV4dC5maWxsUmVjdChwb3NpdGlvbi5YLCBwb3NpdGlvbi5ZLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5fY29udGV4dC5zdHJva2VSZWN0KHBvc2l0aW9uLlgsIHBvc2l0aW9uLlksIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LnJlc3RvcmUoKTtcbiAgICB9XG5cbiAgICBkcmF3VGV4dCh0ZXh0OiBzdHJpbmcsIGZvbnQ6c3RyaW5nLCBjb2xvcjogc3RyaW5nLCBwb3NpdGlvbjogVmVjdG9yMik6IHZvaWQge1xuICAgICAgICB0aGlzLl9jb250ZXh0LnNhdmUoKTtcbiAgICAgICAgdGhpcy5fY29udGV4dC5maWxsU3R5bGUgPSBjb2xvcjtcbiAgICAgICAgdGhpcy5fY29udGV4dC5mb250ID0gZm9udDtcbiAgICAgICAgdGhpcy5fY29udGV4dC5maWxsVGV4dCh0ZXh0LCBwb3NpdGlvbi5YLCBwb3NpdGlvbi5ZKTtcbiAgICAgICAgdGhpcy5fY29udGV4dC5yZXN0b3JlKCk7XG4gICAgfVxuXG4gICAgZHJhd1JlY3RBdENlbGwoaTogbnVtYmVyLCBqOiBudW1iZXIsIGZpbGxDb2xvcjogc3RyaW5nLCBzdHJva2VDb2xvcjogc3RyaW5nLCBjZWxsU2l6ZTogbnVtYmVyKSA6IHZvaWQge1xuICAgICAgICB0aGlzLmRyYXdSZWN0KG5ldyBWZWN0b3IyKGogKiBjZWxsU2l6ZSxpICogY2VsbFNpemUpLCBmaWxsQ29sb3IsIHN0cm9rZUNvbG9yLCBjZWxsU2l6ZSwgY2VsbFNpemUpO1xuICAgIH1cbn1cblxuY29uc3QgY2FudmFzIDogSFRNTENhbnZhc0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2NyZWVuJykgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XG5leHBvcnQgY29uc3QgY2FudmFzMkQgPSBuZXcgQ2FudmFzMkQoY2FudmFzKTsiLCJpbXBvcnQgeyBHYW1lV29ybGQgfSBmcm9tICcuL0dhbWVXb3JsZCc7XG5pbXBvcnQgeyBrZXlib2FyZCB9IGZyb20gJy4vaW5wdXQvS2V5Ym9hcmQnO1xuaW1wb3J0IHsgY2FudmFzMkQgfSBmcm9tICcuL0NhbnZhcyc7XG5pbXBvcnQgeyBHQU1FX0NPTkZJRyB9IGZyb20gJy4vZ2FtZS5jb25maWcnO1xuXG5jb25zdCBnYW1lV2lkdGggPSBjYW52YXMyRC5XaWR0aCAvIEdBTUVfQ09ORklHLkNFTExfU0laRTtcbmNvbnN0IGdhbWVIZWlnaHQgPSBjYW52YXMyRC5IZWlnaHQgLyBHQU1FX0NPTkZJRy5DRUxMX1NJWkU7XG5cbmxldCBtYXA6IEdhbWVXb3JsZDtcblxuZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgbWFwID0gbmV3IEdhbWVXb3JsZChnYW1lV2lkdGgsIGdhbWVIZWlnaHQpO1xuICAgIGdhbWVMb29wKCk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICBtYXAudXBkYXRlKCk7XG4gICAga2V5Ym9hcmQucmVzZXQoKTtcbn1cblxuZnVuY3Rpb24gZHJhdygpIHtcbiAgICBjYW52YXMyRC5jbGVhcigpO1xuICAgIGNhbnZhczJELmRyYXdCYWNrZ3JvdW5kKEdBTUVfQ09ORklHLkJBQ0tHUk9VTkRfQ09MT1IpO1xuICAgIG1hcC5kcmF3KCk7XG59XG5cbmZ1bmN0aW9uIGdhbWVMb29wKCkge1xuICAgIHVwZGF0ZSgpO1xuICAgIGRyYXcoKTtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZ2FtZUxvb3ApO1xufVxuXG5zdGFydCgpOyIsImltcG9ydCB7IEdBTUVfQ09ORklHIH0gZnJvbSAnLi9nYW1lLmNvbmZpZyc7XG5pbXBvcnQgeyBrZXlib2FyZCB9IGZyb20gJy4vaW5wdXQvS2V5Ym9hcmQnO1xuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4vZ2VvbS9WZWN0b3IyJztcbmltcG9ydCB7IGNhbnZhczJEIH0gZnJvbSAnLi9DYW52YXMnO1xuaW1wb3J0IHsgQ2VsbCB9IGZyb20gXCIuL21hcC9DZWxsXCI7XG5pbXBvcnQgeyBTaGFwZVR5cGUgfSBmcm9tICcuL3NoYXBlVHlwZS9TaGFwZVR5cGUnO1xuXG5leHBvcnQgY2xhc3MgR2FtZVdvcmxkIHtcblxuICAgIC8vLS0tLS0tTWVtYmVycy0tLS0tLS8vXG5cbiAgICBwcml2YXRlIF9tYXA6IENlbGxbXVtdO1xuICAgIHByaXZhdGUgX3dpZHRoOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfaGVpZ2h0OiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfbW92aW5nU2hhcGVDb2xvcjogc3RyaW5nO1xuICAgIHByaXZhdGUgX3VwZGF0ZUV2ZXJ5WEZyYW1lczogbnVtYmVyID0gMjA7XG4gICAgcHJpdmF0ZSBfZnJhbWU6IG51bWJlciA9IDA7XG4gICAgcHJpdmF0ZSBfbW92aW5nU2hhcGU6IFZlY3RvcjJbXSA9IFtdO1xuICAgIHByaXZhdGUgX21vdmluZ1NoYXBlT3JpZ2luOiBWZWN0b3IyO1xuICAgIHByaXZhdGUgX3Njb3JlOiBudW1iZXIgPSAwO1xuICAgIHByaXZhdGUgX2dhbWVPdmVyIDogYm9vbGVhbjtcblxuICAgIHByaXZhdGUgX3NoYXBlVHlwZXM6IFNoYXBlVHlwZVtdID0gW1xuICAgICAgICBTaGFwZVR5cGUuSSxcbiAgICAgICAgU2hhcGVUeXBlLkosXG4gICAgICAgIFNoYXBlVHlwZS5MLFxuICAgICAgICBTaGFwZVR5cGUuTyxcbiAgICAgICAgU2hhcGVUeXBlLlMsXG4gICAgICAgIFNoYXBlVHlwZS5aLFxuICAgICAgICBTaGFwZVR5cGUuVFxuICAgIF07XG5cbiAgICAvLy0tLS0tLVByb3BlcnRpZXMtLS0tLS0vL1xuICAgIFxuICAgIHB1YmxpYyBnZXQgZ2FtZU92ZXIoKSA6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2FtZU92ZXI7XG4gICAgfVxuICAgIFxuICAgIFxuICAgIC8vLS0tLS0tQ29uc3RydWN0b3ItLS0tLS0vL1xuXG4gICAgY29uc3RydWN0b3Iod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5fd2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5faGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICB0aGlzLmluaXRNYXAoKTtcbiAgICAgICAgdGhpcy5nZW5lcmF0ZVJhbmRvbVNoYXBlKCk7XG4gICAgfVxuXG4gICAgLy8tLS0tLS1Qcml2YXRlIE1ldGhvZHMtLS0tLS0vL1xuXG4gICAgcHJpdmF0ZSBpbml0TWFwKCkge1xuICAgICAgICB0aGlzLl9tYXAgPSBbXTtcblxuICAgICAgICBmb3IobGV0IGk6IG51bWJlciA9IDAgOyBpIDwgdGhpcy5faGVpZ2h0IDsgaSsrICl7XG4gICAgICAgICAgICB0aGlzLl9tYXBbaV0gPSBbXTtcblxuICAgICAgICAgICAgZm9yKGxldCBqOiBudW1iZXIgPSAwIDsgaiA8IHRoaXMuX3dpZHRoIDsgaisrKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXBbaV1bal0gPSBuZXcgQ2VsbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc0NlbGxGaWxsZWQoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNJbk1hcCh4LHkpICYmIHRoaXMuX21hcFt5XVt4XS5maWxsZWQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjbGVhckNlbGwoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgaWYodGhpcy5pc0luTWFwKHgsIHkpKSB7XG4gICAgICAgICAgICB0aGlzLl9tYXBbeV1beF0uZmlsbGVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGlzSW5NYXAoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHggPj0gMCAmJiB4IDwgdGhpcy5fd2lkdGggJiYgeSA+PSAwICYmIHkgPCB0aGlzLl9oZWlnaHQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjb2xvckNlbGwoeDogbnVtYmVyLCB5OiBudW1iZXIsIGNvbG9yOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYodGhpcy5pc0luTWFwKHgsIHkpKXtcbiAgICAgICAgICAgIHRoaXMuX21hcFt5XVt4XS5maWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fbWFwW3ldW3hdLmNvbG9yID0gY29sb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGlzUGFydE9mU2hhcGUoY2VsbDogVmVjdG9yMiwgc2hhcGU6IFZlY3RvcjJbXSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gc2hhcGUuc29tZShzaGFwZUNlbGwgPT4gc2hhcGVDZWxsLlggPT09IGNlbGwuWCAmJiBzaGFwZUNlbGwuWSA9PT0gY2VsbC5ZKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGluY3JlYXNlU2NvcmUoKSA6IHZvaWQge1xuICAgICAgICB0aGlzLl9zY29yZSArPSB0aGlzLl93aWR0aDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGRyb3BTaGFwZSgpOiB2b2lkIHtcbiAgICAgICAgd2hpbGUoIXRoaXMubG93ZXJTaGFwZSgpKXt9XG4gICAgfVxuICAgIHByaXZhdGUgaGFuZGxlSW5wdXQoKTogdm9pZCB7XG5cbiAgICAgICAgbGV0IHRvTW92ZVggPSAwO1xuXG4gICAgICAgIGlmKGtleWJvYXJkLmlzUHJlc3NlZChHQU1FX0NPTkZJRy5EUk9QKSkge1xuICAgICAgICAgICAgdGhpcy5kcm9wU2hhcGUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmKGtleWJvYXJkLmlzUHJlc3NlZChHQU1FX0NPTkZJRy5VUF9LRVkpKSB7XG4gICAgICAgICAgICB0aGlzLnJvdGF0ZVNoYXBlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5Ym9hcmQuaXNQcmVzc2VkKEdBTUVfQ09ORklHLkRPV05fS0VZKSkge1xuICAgICAgICAgICAgdGhpcy5sb3dlclNoYXBlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5Ym9hcmQuaXNQcmVzc2VkKEdBTUVfQ09ORklHLkxFRlRfS0VZKSkge1xuICAgICAgICAgICAgdG9Nb3ZlWCA9IC0xO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleWJvYXJkLmlzUHJlc3NlZChHQU1FX0NPTkZJRy5SSUdIVF9LRVkpKSB7XG4gICAgICAgICAgICB0b01vdmVYID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHRvTW92ZVggIT09IDApe1xuXG4gICAgICAgICAgICBjb25zdCByZWFjaGVkQm9yZGVyID0gdGhpcy5fbW92aW5nU2hhcGUuc29tZShjZWxsID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0WCA9IGNlbGwuWCArIHRvTW92ZVg7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFydE9mU2hhcGUgPSB0aGlzLmlzUGFydE9mU2hhcGUoY2VsbC5hZGRYKHRvTW92ZVgpLCB0aGlzLl9tb3ZpbmdTaGFwZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5leHRYIDwgMCB8fCBuZXh0WCA9PT0gdGhpcy5fd2lkdGggfHxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuaXNDZWxsRmlsbGVkKG5leHRYLCBjZWxsLlkpICYmICFwYXJ0T2ZTaGFwZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYoIXJlYWNoZWRCb3JkZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb3ZpbmdTaGFwZS5mb3JFYWNoKGNlbGwgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyQ2VsbChjZWxsLlgsIGNlbGwuWSk7XG4gICAgICAgICAgICAgICAgICAgIGNlbGwuYWRkVG9YKHRvTW92ZVgpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYodGhpcy5fbW92aW5nU2hhcGVPcmlnaW4pe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb3ZpbmdTaGFwZU9yaWdpbi5hZGRUb1godG9Nb3ZlWCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5fbW92aW5nU2hhcGUuZm9yRWFjaChjZWxsID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2xvckNlbGwoY2VsbC5YLCBjZWxsLlksIHRoaXMuX21vdmluZ1NoYXBlQ29sb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByb3RhdGVTaGFwZSgpOiB2b2lkIHtcblxuICAgICAgICBpZighdGhpcy5fbW92aW5nU2hhcGVPcmlnaW4pe1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG5ld1NoYXBlID0gW107XG5cbiAgICAgICAgZm9yKGxldCBpID0gMCA7IGkgPCB0aGlzLl9tb3ZpbmdTaGFwZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGNlbGwgPSB0aGlzLl9tb3ZpbmdTaGFwZVtpXTtcbiAgICAgICAgICAgIGxldCB4ID0gY2VsbC5YIC0gdGhpcy5fbW92aW5nU2hhcGVPcmlnaW4uWDtcbiAgICAgICAgICAgIGxldCB5ID0gY2VsbC5ZIC0gdGhpcy5fbW92aW5nU2hhcGVPcmlnaW4uWTtcbiAgICAgICAgICAgIGxldCBuZXdYID0gLXk7XG4gICAgICAgICAgICBsZXQgbmV3WSA9IHg7XG5cbiAgICAgICAgICAgIGxldCBuZXdDZWxsID0gdGhpcy5fbW92aW5nU2hhcGVPcmlnaW4uYWRkWChuZXdYKS5hZGRZKG5ld1kpO1xuICAgICAgICAgICAgbmV3U2hhcGUucHVzaChuZXdDZWxsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwb3NzaWJsZVJvdGF0aW9uID0gbmV3U2hhcGUuZXZlcnkoY2VsbCA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYXJ0T2ZTaGFwZSA9IHRoaXMuaXNQYXJ0T2ZTaGFwZShjZWxsLCB0aGlzLl9tb3ZpbmdTaGFwZSk7XG4gICAgICAgICAgICByZXR1cm4gY2VsbC5ZID49IDAgJiYgY2VsbC5YID49IDAgJiYgY2VsbC5YIDwgdGhpcy5fd2lkdGggJiZcbiAgICAgICAgICAgICAgICAoIXRoaXMuaXNDZWxsRmlsbGVkKGNlbGwuWCwgY2VsbC5ZKSB8fCBwYXJ0T2ZTaGFwZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmKHBvc3NpYmxlUm90YXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuX21vdmluZ1NoYXBlLmZvckVhY2goY2VsbCA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhckNlbGwoY2VsbC5YLCBjZWxsLlkpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuX21vdmluZ1NoYXBlID0gbmV3U2hhcGU7XG5cbiAgICAgICAgICAgIHRoaXMuX21vdmluZ1NoYXBlLmZvckVhY2goY2VsbCA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb2xvckNlbGwoY2VsbC5YLCBjZWxsLlksIHRoaXMuX21vdmluZ1NoYXBlQ29sb3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGxvd2VyU2hhcGUoKTogYm9vbGVhbiB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCByZWFjaGVkQm90dG9tID0gdGhpcy5fbW92aW5nU2hhcGUuc29tZShjZWxsID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5leHRZOiBudW1iZXIgPSBjZWxsLlkgKyAxO1xuICAgICAgICAgICAgY29uc3QgcGFydE9mU2hhcGUgPSB0aGlzLmlzUGFydE9mU2hhcGUoY2VsbC5hZGRZKDEpLCB0aGlzLl9tb3ZpbmdTaGFwZSk7XG4gICAgICAgICAgICByZXR1cm4gbmV4dFkgPT09IHRoaXMuX2hlaWdodCB8fFxuICAgICAgICAgICAgICAgICAgICh0aGlzLmlzQ2VsbEZpbGxlZChjZWxsLlgsIG5leHRZKSAmJiAhcGFydE9mU2hhcGUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZighcmVhY2hlZEJvdHRvbSkge1xuICAgICAgICAgICAgdGhpcy5fbW92aW5nU2hhcGUuZm9yRWFjaChjZWxsID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyQ2VsbChjZWxsLlgsIGNlbGwuWSk7XG4gICAgICAgICAgICAgICAgY2VsbC5hZGRUb1koMSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYodGhpcy5fbW92aW5nU2hhcGVPcmlnaW4pe1xuICAgICAgICAgICAgICAgIHRoaXMuX21vdmluZ1NoYXBlT3JpZ2luLmFkZFRvWSgxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fbW92aW5nU2hhcGUuZm9yRWFjaChjZWxsID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yQ2VsbChjZWxsLlgsIGNlbGwuWSwgdGhpcy5fbW92aW5nU2hhcGVDb2xvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZWFjaGVkQm90dG9tO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlRmlsbGVkTGluZXMoKTogdm9pZCB7XG4gICAgICAgIFxuICAgICAgICBmb3IgKGxldCBpID0gMCA7IGkgPCB0aGlzLl9tYXAubGVuZ3RoIDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBmaWxsZWRMaW5lIDogYm9vbGVhbiA9IHRoaXMuX21hcFtpXS5ldmVyeShjZWxsID0+IGNlbGwuZmlsbGVkKTtcblxuICAgICAgICAgICAgaWYoZmlsbGVkTGluZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21hcC5zcGxpY2UoaSwxKTtcbiAgICAgICAgICAgICAgICBsZXQgbmV3Um93OiBDZWxsW10gPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGogPSAwIDsgaiA8IHRoaXMuX3dpZHRoIDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld1Jvd1tqXSA9IG5ldyBDZWxsKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5fbWFwLnVuc2hpZnQobmV3Um93KTtcbiAgICAgICAgICAgICAgICB0aGlzLmluY3JlYXNlU2NvcmUoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZih0aGlzLl91cGRhdGVFdmVyeVhGcmFtZXMgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUV2ZXJ5WEZyYW1lcy0tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgY2hlY2tGb3JHYW1lT3ZlcigpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcFswXS5zb21lKGNlbGwgPT4gY2VsbC5maWxsZWQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYWRkU2hhcGUoc2hhcGVUeXBlOiBTaGFwZVR5cGUpOiB2b2lkIHtcblxuICAgICAgICBsZXQgc2hhcGVZID0gLTQ7XG4gICAgICAgIGxldCByYW5kb21YOiBudW1iZXI7XG4gICAgICAgIGxldCBwb3NpdGlvbjogVmVjdG9yMjtcbiAgICAgICAgdGhpcy5fbW92aW5nU2hhcGUgPSBbXTtcblxuICAgICAgICBzd2l0Y2goc2hhcGVUeXBlKSB7XG4gICAgICAgICAgICBjYXNlIFNoYXBlVHlwZS5JOlxuICAgICAgICAgICAgICAgIHJhbmRvbVggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0aGlzLl93aWR0aCk7XG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSBuZXcgVmVjdG9yMihyYW5kb21YLCBzaGFwZVkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21vdmluZ1NoYXBlID0gW1xuICAgICAgICAgICAgICAgICAgICBuZXcgVmVjdG9yMihwb3NpdGlvbi5YLCBwb3NpdGlvbi5ZKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3RvcjIocG9zaXRpb24uWCwgcG9zaXRpb24uWSArIDEpLFxuICAgICAgICAgICAgICAgICAgICBuZXcgVmVjdG9yMihwb3NpdGlvbi5YLCBwb3NpdGlvbi5ZICsgMiksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IyKHBvc2l0aW9uLlgsIHBvc2l0aW9uLlkgKyAzKVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgdGhpcy5fbW92aW5nU2hhcGVPcmlnaW4gPSBuZXcgVmVjdG9yMihwb3NpdGlvbi5YLCBwb3NpdGlvbi5ZICsgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFNoYXBlVHlwZS5KOlxuICAgICAgICAgICAgICAgIHJhbmRvbVggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAodGhpcy5fd2lkdGggLSAxKSkgKyAxO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gbmV3IFZlY3RvcjIocmFuZG9tWCwgc2hhcGVZKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb3ZpbmdTaGFwZSA9IFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3RvcjIocG9zaXRpb24uWCwgcG9zaXRpb24uWSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IyKHBvc2l0aW9uLlgsIHBvc2l0aW9uLlkgKyAxKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3RvcjIocG9zaXRpb24uWCwgcG9zaXRpb24uWSArIDIpLFxuICAgICAgICAgICAgICAgICAgICBuZXcgVmVjdG9yMihwb3NpdGlvbi5YIC0gMSwgcG9zaXRpb24uWSArIDIpLFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgdGhpcy5fbW92aW5nU2hhcGVPcmlnaW4gPSBuZXcgVmVjdG9yMihwb3NpdGlvbi5YLCBwb3NpdGlvbi5ZICsgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFNoYXBlVHlwZS5MOlxuICAgICAgICAgICAgICAgIHJhbmRvbVggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAodGhpcy5fd2lkdGggLSAxKSk7XG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSBuZXcgVmVjdG9yMihyYW5kb21YLCBzaGFwZVkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21vdmluZ1NoYXBlID0gW1xuICAgICAgICAgICAgICAgICAgICBuZXcgVmVjdG9yMihwb3NpdGlvbi5YLCBwb3NpdGlvbi5ZICksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IyKHBvc2l0aW9uLlgsIHBvc2l0aW9uLlkgKyAxKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3RvcjIocG9zaXRpb24uWCwgcG9zaXRpb24uWSArIDIpLFxuICAgICAgICAgICAgICAgICAgICBuZXcgVmVjdG9yMihwb3NpdGlvbi5YICsgMSwgcG9zaXRpb24uWSArIDIpLFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgdGhpcy5fbW92aW5nU2hhcGVPcmlnaW4gPSBuZXcgVmVjdG9yMihwb3NpdGlvbi5YLCBwb3NpdGlvbi5ZICsgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFNoYXBlVHlwZS5POlxuICAgICAgICAgICAgICAgIHJhbmRvbVggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAodGhpcy5fd2lkdGggLSAxKSk7XG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSBuZXcgVmVjdG9yMihyYW5kb21YLCBzaGFwZVkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21vdmluZ1NoYXBlID0gW1xuICAgICAgICAgICAgICAgICAgICBuZXcgVmVjdG9yMihwb3NpdGlvbi5YLCBwb3NpdGlvbi5ZKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3RvcjIocG9zaXRpb24uWCArIDEsIHBvc2l0aW9uLlkpLFxuICAgICAgICAgICAgICAgICAgICBuZXcgVmVjdG9yMihwb3NpdGlvbi5YLCBwb3NpdGlvbi5ZICsgMSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IyKHBvc2l0aW9uLlggKyAxLCBwb3NpdGlvbi5ZICsgMSksXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb3ZpbmdTaGFwZU9yaWdpbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFNoYXBlVHlwZS5TOlxuICAgICAgICAgICAgICAgIHJhbmRvbVggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAodGhpcy5fd2lkdGggLSAyKSkgKyAxO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gbmV3IFZlY3RvcjIocmFuZG9tWCwgc2hhcGVZKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb3ZpbmdTaGFwZSA9IFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3RvcjIocG9zaXRpb24uWCwgcG9zaXRpb24uWSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IyKHBvc2l0aW9uLlggKyAxLCBwb3NpdGlvbi5ZKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3RvcjIocG9zaXRpb24uWCwgcG9zaXRpb24uWSArIDEpLFxuICAgICAgICAgICAgICAgICAgICBuZXcgVmVjdG9yMihwb3NpdGlvbi5YIC0gMSwgcG9zaXRpb24uWSArIDEpLFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgdGhpcy5fbW92aW5nU2hhcGVPcmlnaW4gPSBuZXcgVmVjdG9yMihwb3NpdGlvbi5YLCBwb3NpdGlvbi5ZICsgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFNoYXBlVHlwZS5aOlxuICAgICAgICAgICAgICAgIHJhbmRvbVggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAodGhpcy5fd2lkdGggLSAyKSkgKyAxO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gbmV3IFZlY3RvcjIocmFuZG9tWCwgc2hhcGVZKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb3ZpbmdTaGFwZSA9IFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3RvcjIocG9zaXRpb24uWCwgcG9zaXRpb24uWSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IyKHBvc2l0aW9uLlggLSAxLCBwb3NpdGlvbi5ZKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3RvcjIocG9zaXRpb24uWCwgcG9zaXRpb24uWSArIDEpLFxuICAgICAgICAgICAgICAgICAgICBuZXcgVmVjdG9yMihwb3NpdGlvbi5YICsgMSwgcG9zaXRpb24uWSArIDEpLFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgdGhpcy5fbW92aW5nU2hhcGVPcmlnaW4gPSBuZXcgVmVjdG9yMihwb3NpdGlvbi5YLCBwb3NpdGlvbi5ZICsgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFNoYXBlVHlwZS5UOlxuICAgICAgICAgICAgICAgIHJhbmRvbVggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAodGhpcy5fd2lkdGggLSAyKSkgKyAxO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gbmV3IFZlY3RvcjIocmFuZG9tWCwgc2hhcGVZKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb3ZpbmdTaGFwZSA9IFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3RvcjIocG9zaXRpb24uWCwgcG9zaXRpb24uWSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IyKHBvc2l0aW9uLlgsIHBvc2l0aW9uLlkgKyAxKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3RvcjIocG9zaXRpb24uWCAtIDEsIHBvc2l0aW9uLlkgKyAxKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3RvcjIocG9zaXRpb24uWCArIDEsIHBvc2l0aW9uLlkgKyAxKSxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIHRoaXMuX21vdmluZ1NoYXBlT3JpZ2luID0gbmV3IFZlY3RvcjIocG9zaXRpb24uWCwgcG9zaXRpb24uWSArIDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrOyAgXG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXRzIHNoYXBlIGNvbG9yXG4gICAgICAgIGNvbnN0IHNoYXBlVHlwZUluZGV4ID0gdGhpcy5fc2hhcGVUeXBlcy5pbmRleE9mKHNoYXBlVHlwZSkgXG4gICAgICAgIHRoaXMuX21vdmluZ1NoYXBlQ29sb3IgPSBHQU1FX0NPTkZJRy5TSEFQRV9DT0xPUlNbc2hhcGVUeXBlSW5kZXhdO1xuXG4gICAgICAgIHRoaXMuX21vdmluZ1NoYXBlLmZvckVhY2goY2VsbCA9PiB7XG4gICAgICAgICAgICB0aGlzLmNvbG9yQ2VsbChjZWxsLlgsIGNlbGwuWSwgdGhpcy5fbW92aW5nU2hhcGVDb2xvcilcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZVJhbmRvbVNoYXBlKCk6IHZvaWQge1xuICAgICAgICBjb25zdCByYW5kb21TaGFwZVR5cGVJbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRoaXMuX3NoYXBlVHlwZXMubGVuZ3RoKTtcbiAgICAgICAgdGhpcy5hZGRTaGFwZSh0aGlzLl9zaGFwZVR5cGVzW3JhbmRvbVNoYXBlVHlwZUluZGV4XSk7XG4gICAgfVxuXG4gICAgLy8tLS0tLS1QdWJsaWMgTWV0aG9kcy0tLS0tLS8vXG5cbiAgICBwdWJsaWMgdXBkYXRlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmhhbmRsZUlucHV0KCk7XG4gICAgICAgIGlmKCsrdGhpcy5fZnJhbWUgJSB0aGlzLl91cGRhdGVFdmVyeVhGcmFtZXMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZWFjaGVkQm90dG9tID0gdGhpcy5sb3dlclNoYXBlKCk7XG4gICAgICAgIGlmKHJlYWNoZWRCb3R0b20pIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRmlsbGVkTGluZXMoKTtcbiAgICAgICAgICAgIGNvbnN0IGdhbWVPdmVyOiBib29sZWFuID0gdGhpcy5jaGVja0ZvckdhbWVPdmVyKCk7XG4gICAgICAgICAgICBpZighZ2FtZU92ZXIpe1xuICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVSYW5kb21TaGFwZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICB0aGlzLl9nYW1lT3ZlciA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGRyYXdTY29yZSgpOiB2b2lkIHtcbiAgICAgICAgY2FudmFzMkQuZHJhd1RleHQoJ1Njb3JlOiAnICsgdGhpcy5fc2NvcmUudG9TdHJpbmcoKSwgR0FNRV9DT05GSUcuRk9OVCwgR0FNRV9DT05GSUcuRk9OVF9DT0xPUiwgR0FNRV9DT05GSUcuU0NPUkVfUE9TSVRJT04pO1xuICAgIH1cblxuICAgIHB1YmxpYyBkcmF3KCk6IHZvaWQge1xuICAgICAgICBmb3IobGV0IGkgPSAwIDsgaSA8IHRoaXMuX21hcC5sZW5ndGggOyBpKyspe1xuICAgICAgICAgICAgZm9yKGxldCBqID0gMCA7IGogPCB0aGlzLl9tYXBbaV0ubGVuZ3RoIDsgaisrKXtcbiAgICAgICAgICAgICAgICBjb25zdCBjZWxsOiBDZWxsID0gdGhpcy5fbWFwW2ldW2pdO1xuICAgICAgICAgICAgICAgIGlmKGNlbGwuZmlsbGVkKXtcbiAgICAgICAgICAgICAgICAgICAgY2FudmFzMkQuZHJhd1JlY3RBdENlbGwoaSwgaiwgY2VsbC5jb2xvciwgR0FNRV9DT05GSUcuU1RST0tFX0NPTE9SLCBHQU1FX0NPTkZJRy5DRUxMX1NJWkUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZHJhd1Njb3JlKCk7XG4gICAgfVxufSIsIlxuZXhwb3J0IGNsYXNzIENlbGwge1xuXG4gICAgcHJpdmF0ZSBfZmlsbGVkIDogYm9vbGVhbjtcbiAgICBwcml2YXRlIF9jb2xvciA6IHN0cmluZztcblxuICAgIHB1YmxpYyBnZXQgY29sb3IoKSA6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb2xvcjtcbiAgICB9XG4gICAgcHVibGljIHNldCBjb2xvcih2IDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX2NvbG9yID0gdjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGZpbGxlZCgpIDogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maWxsZWQ7XG4gICAgfVxuICAgIHB1YmxpYyBzZXQgZmlsbGVkKHYgOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuX2ZpbGxlZCA9IHY7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX2ZpbGxlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBcbn0iLCJleHBvcnQgZW51bSBTaGFwZVR5cGUge1xuICAgIEksXG4gICAgSixcbiAgICBMLFxuICAgIFMsXG4gICAgWixcbiAgICBPLFxuICAgIFRcbn0iXSwic291cmNlUm9vdCI6IiJ9