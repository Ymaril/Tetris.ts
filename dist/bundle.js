!function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=4)}([function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GAME_CONFIG={CELL_SIZE:80,BACKGROUND_COLOR:"#28363B",STROKE_COLOR:"black",SHAPE_COLORS:["#F9B38F","#BF6C86","#84AF9C","#6D5C80","#FFA3D0","#439F9E","#EF5F3C"],FONT:"40px Comic Sans MS",FONT_COLOR:"white",SCORE_POSITION:{X:20,Y:50},LEFT_KEY:37,RIGHT_KEY:39,UP_KEY:38,DOWN_KEY:40,DROP:13}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){var e=this;this.keysPressed=[],document.addEventListener("keydown",function(t){e.keyDown(t)})}return e.prototype.keyDown=function(e){this.keysPressed[e.keyCode]=!0},e.prototype.reset=function(){this.keysPressed=[]},e.prototype.isPressed=function(e){return this.keysPressed[e]},e}();t.keyboard=new n},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){this._x=e,this._y=t}return Object.defineProperty(e.prototype,"X",{get:function(){return this._x},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"Y",{get:function(){return this._y},enumerable:!0,configurable:!0}),Object.defineProperty(e,"Zero",{get:function(){return new e(0,0)},enumerable:!0,configurable:!0}),e.prototype.addX=function(t){return new e(this._x,this._y).addToX(t)},e.prototype.addY=function(t){return new e(this._x,this._y).addToY(t)},e.prototype.addToX=function(e){return this._x+=e,this},e.prototype.addToY=function(e){return this._y+=e,this},e.prototype.add=function(e,t){this.addToX(e),this.addToY(t)},e}();t.Vector2=n},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=o(2),r=function(){function e(e){this._canvas=e,this._context=this._canvas.getContext("2d"),this.fixDPI()}return Object.defineProperty(e.prototype,"Width",{get:function(){return this._canvas.width},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"Height",{get:function(){return this._canvas.height},enumerable:!0,configurable:!0}),e.prototype.clear=function(){this._context.clearRect(0,0,this._canvas.width,this._canvas.height)},e.prototype.fixDPI=function(){var e=window.devicePixelRatio,t=+getComputedStyle(this._canvas).getPropertyValue("height").slice(0,-2),o=+getComputedStyle(this._canvas).getPropertyValue("width").slice(0,-2);this._canvas.setAttribute("height",(t*e).toString()),this._canvas.setAttribute("width",(o*e).toString())},e.prototype.drawBackground=function(e){this._context.save(),this._context.fillStyle=e,this._context.fillRect(0,0,this._canvas.width,this._canvas.height),this._context.restore()},e.prototype.drawRect=function(e,t,o,n,r){this._context.save(),this._context.strokeStyle=o,this._context.fillStyle=t,this._context.fillRect(e.X,e.Y,n,r),this._context.strokeRect(e.X,e.Y,n,r),this._context.restore()},e.prototype.drawText=function(e,t,o,n){this._context.save(),this._context.fillStyle=o,this._context.font=t,this._context.fillText(e,n.X,n.Y),this._context.restore()},e.prototype.drawRectAtCell=function(e,t,o,r,i){this.drawRect(new n.Vector2(t*i,e*i),o,r,i,i)},e}(),i=document.getElementById("screen");t.canvas2D=new r(i)},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,r=o(5),i=o(1),a=o(3),s=o(0),c=a.canvas2D.Width/s.GAME_CONFIG.CELL_SIZE,h=a.canvas2D.Height/s.GAME_CONFIG.CELL_SIZE;function p(){n.update(),i.keyboard.reset(),a.canvas2D.clear(),a.canvas2D.drawBackground(s.GAME_CONFIG.BACKGROUND_COLOR),n.draw(),requestAnimationFrame(p)}n=new r.GameWorld(c,h),p()},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=o(0),r=o(1),i=o(2),a=o(3),s=o(6),c=o(8),h=o(7),p=function(){function e(e,t){this._updateEveryXFrames=20,this._frame=0,this._movingShape=null,this._shapesQueue=[],this._score=0,this._shapeTypes=[h.ShapeType.I,h.ShapeType.J,h.ShapeType.L,h.ShapeType.O,h.ShapeType.S,h.ShapeType.Z,h.ShapeType.T],this._width=e,this._height=t,this.initMap();var o=this.generateRandomShape();this._shapesQueue.push(o),this._movingShape=this.generateRandomShape()}return Object.defineProperty(e.prototype,"gameOver",{get:function(){return this._gameOver},enumerable:!0,configurable:!0}),e.prototype.initMap=function(){this._map=[];for(var e=0;e<this._height;e++){this._map[e]=[];for(var t=0;t<this._width;t++)this._map[e][t]=new s.Cell}},e.prototype.isCellFilled=function(e,t){return this.isInMap(e,t)&&this._map[t][e].filled},e.prototype.clearCell=function(e,t){this.isInMap(e,t)&&(this._map[t][e].filled=!1)},e.prototype.isInMap=function(e,t){return e>=0&&e<this._width&&t>=0&&t<this._height},e.prototype.colorCell=function(e,t,o){this.isInMap(e,t)&&(this._map[t][e].filled=!0,this._map[t][e].color=o)},e.prototype.increaseScore=function(){this._score+=this._width},e.prototype.dropShape=function(){for(;!this.lowerShape(););},e.prototype.handleInput=function(){var e=this,t=0;(r.keyboard.isPressed(n.GAME_CONFIG.DROP)?this.dropShape():r.keyboard.isPressed(n.GAME_CONFIG.UP_KEY)?this.rotateShape():r.keyboard.isPressed(n.GAME_CONFIG.DOWN_KEY)?this.lowerShape():r.keyboard.isPressed(n.GAME_CONFIG.LEFT_KEY)?t=-1:r.keyboard.isPressed(n.GAME_CONFIG.RIGHT_KEY)&&(t=1),0!==t)&&(this._movingShape.cells.some(function(o){var n=o.X+t,r=e._movingShape.isPartOfShape(o.addX(t));return n<0||n===e._width||e.isCellFilled(n,o.Y)&&!r})||(this._movingShape.cells.forEach(function(t){e.clearCell(t.X,t.Y)}),this._movingShape.move(t,0),this._movingShape.cells.forEach(function(t){e.colorCell(t.X,t.Y,e._movingShape.color)})))},e.prototype.rotateShape=function(){var e=this;if(this._movingShape.origin){for(var t=[],o=0;o<this._movingShape.cells.length;o++){var n=this._movingShape.cells[o],r=n.X-this._movingShape.origin.X,i=-(n.Y-this._movingShape.origin.Y),a=r,s=this._movingShape.origin.addX(i).addY(a);t.push(s)}t.every(function(t){var o=e._movingShape.isPartOfShape(t);return t.Y>=0&&t.X>=0&&t.X<e._width&&(!e.isCellFilled(t.X,t.Y)||o)})&&(this._movingShape.cells.forEach(function(t){e.clearCell(t.X,t.Y)}),this._movingShape.cells=t,this._movingShape.cells.forEach(function(t){e.colorCell(t.X,t.Y,e._movingShape.color)}))}},e.prototype.lowerShape=function(){var e=this,t=this._movingShape.cells.some(function(t){var o=t.Y+1,n=e._movingShape.isPartOfShape(t.addY(1));return o===e._height||e.isCellFilled(t.X,o)&&!n});return t||(this._movingShape.cells.forEach(function(t){e.clearCell(t.X,t.Y)}),this._movingShape.move(0,1),this._movingShape.cells.forEach(function(t){e.colorCell(t.X,t.Y,e._movingShape.color)})),t},e.prototype.handleFilledLines=function(){for(var e=0;e<this._map.length;e++){if(this._map[e].every(function(e){return e.filled})){this._map.splice(e,1);for(var t=[],o=0;o<this._width;o++)t[o]=new s.Cell;this._map.unshift(t),this.increaseScore(),this._updateEveryXFrames>0&&this._updateEveryXFrames--}}},e.prototype.checkForGameOver=function(){return this._map[0].some(function(e){return e.filled})},e.prototype.createShape=function(e){var t,o,r,a=[];switch(e){case h.ShapeType.I:t=Math.floor(Math.random()*this._width),o=new i.Vector2(t,-4),a=[new i.Vector2(o.X,o.Y),new i.Vector2(o.X,o.Y+1),new i.Vector2(o.X,o.Y+2),new i.Vector2(o.X,o.Y+3)],r=new i.Vector2(o.X,o.Y+1);break;case h.ShapeType.J:t=Math.floor(Math.random()*(this._width-1))+1,o=new i.Vector2(t,-4),a=[new i.Vector2(o.X,o.Y),new i.Vector2(o.X,o.Y+1),new i.Vector2(o.X,o.Y+2),new i.Vector2(o.X-1,o.Y+2)],r=new i.Vector2(o.X,o.Y+1);break;case h.ShapeType.L:t=Math.floor(Math.random()*(this._width-1)),o=new i.Vector2(t,-4),a=[new i.Vector2(o.X,o.Y),new i.Vector2(o.X,o.Y+1),new i.Vector2(o.X,o.Y+2),new i.Vector2(o.X+1,o.Y+2)],r=new i.Vector2(o.X,o.Y+1);break;case h.ShapeType.O:t=Math.floor(Math.random()*(this._width-1)),o=new i.Vector2(t,-4),a=[new i.Vector2(o.X,o.Y),new i.Vector2(o.X+1,o.Y),new i.Vector2(o.X,o.Y+1),new i.Vector2(o.X+1,o.Y+1)],r=null;break;case h.ShapeType.S:t=Math.floor(Math.random()*(this._width-2))+1,o=new i.Vector2(t,-4),a=[new i.Vector2(o.X,o.Y),new i.Vector2(o.X+1,o.Y),new i.Vector2(o.X,o.Y+1),new i.Vector2(o.X-1,o.Y+1)],r=new i.Vector2(o.X,o.Y+1);break;case h.ShapeType.Z:t=Math.floor(Math.random()*(this._width-2))+1,o=new i.Vector2(t,-4),a=[new i.Vector2(o.X,o.Y),new i.Vector2(o.X-1,o.Y),new i.Vector2(o.X,o.Y+1),new i.Vector2(o.X+1,o.Y+1)],r=new i.Vector2(o.X,o.Y+1);break;case h.ShapeType.T:t=Math.floor(Math.random()*(this._width-2))+1,o=new i.Vector2(t,-4),a=[new i.Vector2(o.X,o.Y),new i.Vector2(o.X,o.Y+1),new i.Vector2(o.X-1,o.Y+1),new i.Vector2(o.X+1,o.Y+1)],r=new i.Vector2(o.X,o.Y+1)}var s=this._shapeTypes.indexOf(e),p=n.GAME_CONFIG.SHAPE_COLORS[s];return new c.Shape(e,a,r,p)},e.prototype.generateRandomShape=function(){var e=Math.floor(Math.random()*this._shapeTypes.length);return this.createShape(this._shapeTypes[e])},e.prototype.update=function(){if((this.handleInput(),!(++this._frame%this._updateEveryXFrames))&&this.lowerShape())if(this.handleFilledLines(),this.checkForGameOver())this._gameOver=!0;else{var e=this.generateRandomShape();this._shapesQueue.unshift(e),this._movingShape=this._shapesQueue.pop(),console.log(h.ShapeType[this._shapesQueue[0].shapeType])}},e.prototype.drawScore=function(){a.canvas2D.drawText("Score: "+this._score.toString(),n.GAME_CONFIG.FONT,n.GAME_CONFIG.FONT_COLOR,n.GAME_CONFIG.SCORE_POSITION)},e.prototype.draw=function(){for(var e=0;e<this._map.length;e++)for(var t=0;t<this._map[e].length;t++){var o=this._map[e][t];o.filled&&a.canvas2D.drawRectAtCell(e,t,o.color,n.GAME_CONFIG.STROKE_COLOR,n.GAME_CONFIG.CELL_SIZE)}this.drawScore()},e}();t.GameWorld=p},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this._filled=!1}return Object.defineProperty(e.prototype,"color",{get:function(){return this._color},set:function(e){this._color=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"filled",{get:function(){return this._filled},set:function(e){this._filled=e},enumerable:!0,configurable:!0}),e}();t.Cell=n},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.I=0]="I",e[e.J=1]="J",e[e.L=2]="L",e[e.S=3]="S",e[e.Z=4]="Z",e[e.O=5]="O",e[e.T=6]="T"}(t.ShapeType||(t.ShapeType={}))},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t,o,n){this._cells=[],this._color="",this._origin=null,this._shapeType=e,this._cells=t,this._color=n,this._origin=o}return Object.defineProperty(e.prototype,"shapeType",{get:function(){return this._shapeType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"cells",{get:function(){return this._cells},set:function(e){this._cells=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"origin",{get:function(){return this._origin},set:function(e){this._origin=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"color",{get:function(){return this._color},set:function(e){this._color=e},enumerable:!0,configurable:!0}),e.prototype.isPartOfShape=function(e){return this._cells.some(function(t){return t.X===e.X&&t.Y===e.Y})},e.prototype.move=function(e,t){void 0===e&&(e=0),void 0===t&&(t=0),this._origin&&this._origin.addToX(e).addToY(t),this.cells.forEach(function(o){return o.addToX(e).addToY(t)})},e}();t.Shape=n}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,