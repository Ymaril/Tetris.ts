!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=5)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GAME_CONFIG={UPDATE_AFTER_X_FRAMES:40,CELL_SIZE:40,NEXT_SHAPE_CELL_SIZE:10,BACKGROUND_COLOR:"#28363B",STROKE_COLOR:"black",SHAPE_COLORS:["#F9B38F","#BF6C86","#84AF9C","#6D5C80","#FFA3D0","#439F9E","#EF5F3C"],FONT:"20px Comic Sans MS",FONT_COLOR:"white",SCORE_LABEL:"Score: ",NEXT_SHAPE_LABEL:"Next Shape: ",SCORE_POSITION:{X:10,Y:25},NEXT_SHAPE_LABEL_POSITION:{X:400,Y:25},NEXT_SHAPE_POSITION:{X:545,Y:8},LEFT_KEY:37,RIGHT_KEY:39,UP_KEY:38,DOWN_KEY:40,DROP:13,FILLED_LINE_BONUS:100,DROPPED_SHAPE_BONUS:2,LOWERED_SHAPE_BONUS:1}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){this._x=e,this._y=t}return Object.defineProperty(e.prototype,"X",{get:function(){return this._x},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"Y",{get:function(){return this._y},enumerable:!0,configurable:!0}),Object.defineProperty(e,"Zero",{get:function(){return new e(0,0)},enumerable:!0,configurable:!0}),e.prototype.addX=function(t){return new e(this._x,this._y).addToX(t)},e.prototype.addY=function(t){return new e(this._x,this._y).addToY(t)},e.prototype.addToX=function(e){return this._x+=e,this},e.prototype.addToY=function(e){return this._y+=e,this},e.prototype.add=function(e,t){this.addToX(e),this.addToY(t)},e}();t.Vector2=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(1),o=function(){function e(e){this._canvas=e,this._context=this._canvas.getContext("2d")}return Object.defineProperty(e.prototype,"Width",{get:function(){return this._canvas.width},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"Height",{get:function(){return this._canvas.height},enumerable:!0,configurable:!0}),e.prototype.clear=function(){this._context.clearRect(0,0,this._canvas.width,this._canvas.height)},e.prototype.drawBackground=function(e){this._context.save(),this._context.fillStyle=e,this._context.fillRect(0,0,this._canvas.width,this._canvas.height),this._context.restore()},e.prototype.drawRect=function(e,t,r,n,o){this._context.save(),this._context.strokeStyle=r,this._context.fillStyle=t,this._context.fillRect(e.X,e.Y,n,o),this._context.strokeRect(e.X,e.Y,n,o),this._context.restore()},e.prototype.drawText=function(e,t,r,n){this._context.save(),this._context.fillStyle=r,this._context.font=t,this._context.fillText(e,n.X,n.Y),this._context.restore()},e.prototype.drawRectAtCell=function(e,t,r,o,i){this.drawRect(new n.Vector2(t*i,e*i),r,o,i,i)},e}(),i=document.getElementById("screen");t.canvas2D=new o(i)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){var e=this;this.keysPressed=[],document.addEventListener("keydown",function(t){e.keyDown(t)})}return e.prototype.keyDown=function(e){this.keysPressed[e.keyCode]=!0},e.prototype.reset=function(){this.keysPressed=[]},e.prototype.isPressed=function(e){return this.keysPressed[e]},e}();t.keyboard=new n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.I=0]="I",e[e.J=1]="J",e[e.L=2]="L",e[e.S=3]="S",e[e.Z=4]="Z",e[e.O=5]="O",e[e.T=6]="T"}(t.ShapeType||(t.ShapeType={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,o=r(6),i=r(3),a=r(2),s=r(0),c=a.canvas2D.Width/s.GAME_CONFIG.CELL_SIZE,h=a.canvas2D.Height/s.GAME_CONFIG.CELL_SIZE;function p(){n.update(),i.keyboard.reset(),a.canvas2D.clear(),a.canvas2D.drawBackground(s.GAME_CONFIG.BACKGROUND_COLOR),n.draw(),requestAnimationFrame(p)}n=new o.GameWorld(c,h),p()},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(0),o=r(3),i=r(1),a=r(2),s=r(4),c=r(7),h=r(9),p=function(){function e(e,t){this._movingShape=null,this._shapesQueue=[],this._shapeTypes=[s.ShapeType.I,s.ShapeType.J,s.ShapeType.L,s.ShapeType.O,s.ShapeType.S,s.ShapeType.Z,s.ShapeType.T],this._shapeFactory=new h.ShapeFactory,this._map=new c.GameMap(e,t),this.init()}return Object.defineProperty(e.prototype,"gameOver",{get:function(){return this._gameOver},enumerable:!0,configurable:!0}),e.prototype.init=function(){this._score=0,this._frame=0,this._updateEveryXFrames=n.GAME_CONFIG.UPDATE_AFTER_X_FRAMES,this._map.init();var e=this.generateRandomShape();this._shapesQueue=[e],this._movingShape=this.generateRandomShape()},e.prototype.increaseScore=function(e){this._score+=e},e.prototype.dropShape=function(){for(var e=0;!this.lowerShape();)e++;return e},e.prototype.handleInput=function(){var e=this,t=0;if(o.keyboard.isPressed(n.GAME_CONFIG.DROP)){var r=this.dropShape();this.increaseScore(r*n.GAME_CONFIG.DROPPED_SHAPE_BONUS)}else o.keyboard.isPressed(n.GAME_CONFIG.UP_KEY)?this.rotateShape():o.keyboard.isPressed(n.GAME_CONFIG.DOWN_KEY)?(this.lowerShape(),this.increaseScore(n.GAME_CONFIG.LOWERED_SHAPE_BONUS)):o.keyboard.isPressed(n.GAME_CONFIG.LEFT_KEY)?t=-1:o.keyboard.isPressed(n.GAME_CONFIG.RIGHT_KEY)&&(t=1);0!==t&&(this._movingShape.cells.some(function(r){var n=r.X+t,o=e._movingShape.isPartOfShape(r.addX(t));return n<0||n===e._map.width||e._map.isCellFilled(n,r.Y)&&!o})||(this._map.clearShape(this._movingShape),this._movingShape.move(t,0),this._map.colorShape(this._movingShape)))},e.prototype.rotateShape=function(){var e=this;if(this._movingShape.origin){for(var t=[],r=0,n=this._movingShape.cells;r<n.length;r++){var o=n[r],i=o.X-this._movingShape.origin.X,a=-(o.Y-this._movingShape.origin.Y),s=i,c=this._movingShape.origin.addX(a).addY(s);t.push(c)}t.every(function(t){var r=e._movingShape.isPartOfShape(t);return e._map.isInMap(t.X,t.Y)&&(!e._map.isCellFilled(t.X,t.Y)||r)})&&(this._map.clearShape(this._movingShape),this._movingShape.cells=t,this._map.colorShape(this._movingShape))}},e.prototype.lowerShape=function(){var e=this,t=this._movingShape.cells.some(function(t){var r=t.Y+1,n=e._movingShape.isPartOfShape(t.addY(1));return r===e._map.height||e._map.isCellFilled(t.X,r)&&!n});return t||(this._map.clearShape(this._movingShape),this._movingShape.move(0,1),this._map.colorShape(this._movingShape)),t},e.prototype.handleFilledLines=function(){var e=this._map.removeFilledLines();e>0&&(this.increaseScore(e*n.GAME_CONFIG.FILLED_LINE_BONUS),this._updateEveryXFrames>0&&this._updateEveryXFrames--)},e.prototype.checkForGameOver=function(){return this._map.anyFilledOnRow(0)},e.prototype.generateRandomShape=function(){var e=Math.floor(Math.random()*this._shapeTypes.length),t=n.GAME_CONFIG.SHAPE_COLORS[e];return this._shapeFactory.createShape(this._shapeTypes[e],new i.Vector2(Math.floor(this._map.width/2),-3),t)},e.prototype.drawShapesInQueue=function(){a.canvas2D.drawText(n.GAME_CONFIG.NEXT_SHAPE_LABEL,n.GAME_CONFIG.FONT,n.GAME_CONFIG.FONT_COLOR,n.GAME_CONFIG.NEXT_SHAPE_LABEL_POSITION);for(var e=function(e){var r=t._shapeFactory.createShape(e.shapeType,new i.Vector2(n.GAME_CONFIG.NEXT_SHAPE_POSITION.X,n.GAME_CONFIG.NEXT_SHAPE_POSITION.Y),e.color,n.GAME_CONFIG.NEXT_SHAPE_CELL_SIZE);r.cells.forEach(function(e){return a.canvas2D.drawRect(e,r.color,n.GAME_CONFIG.STROKE_COLOR,n.GAME_CONFIG.NEXT_SHAPE_CELL_SIZE,n.GAME_CONFIG.NEXT_SHAPE_CELL_SIZE)})},t=this,r=0,o=this._shapesQueue;r<o.length;r++){e(o[r])}},e.prototype.update=function(){if((this.handleInput(),!(++this._frame%this._updateEveryXFrames))&&this.lowerShape())if(this.handleFilledLines(),this._gameOver=this.checkForGameOver(),this._gameOver)this.init();else{var e=this.generateRandomShape();this._shapesQueue.unshift(e),this._movingShape=this._shapesQueue.pop()}},e.prototype.drawScore=function(){a.canvas2D.drawText(n.GAME_CONFIG.SCORE_LABEL+this._score.toString(),n.GAME_CONFIG.FONT,n.GAME_CONFIG.FONT_COLOR,n.GAME_CONFIG.SCORE_POSITION)},e.prototype.draw=function(){this._map.draw(),this.drawScore(),this.drawShapesInQueue()},e}();t.GameWorld=p},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(8),o=r(2),i=r(0),a=function(){function e(e,t){this._map=[],this._width=e,this._height=t}return Object.defineProperty(e.prototype,"height",{get:function(){return this._height},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"width",{get:function(){return this._width},enumerable:!0,configurable:!0}),e.prototype.init=function(){for(var e=0;e<this._height;e++){this._map[e]=[];for(var t=0;t<this._width;t++)this._map[e][t]=new n.Cell}},e.prototype.isInMap=function(e,t){return e>=0&&e<this._width&&t>=0&&t<this._height},e.prototype.isCellFilled=function(e,t){return this.isInMap(e,t)&&this._map[t][e].filled},e.prototype.clearCell=function(e,t){this.isInMap(e,t)&&(this._map[t][e].filled=!1)},e.prototype.clearShape=function(e){var t=this;e.cells.forEach(function(e){t.clearCell(e.X,e.Y)})},e.prototype.colorCell=function(e,t,r){this.isInMap(e,t)&&(this._map[t][e].filled=!0,this._map[t][e].color=r)},e.prototype.colorShape=function(e){var t=this;e.cells.forEach(function(r){t.colorCell(r.X,r.Y,e.color)})},e.prototype.anyFilledOnRow=function(e){return this._map[e].some(function(e){return e.filled})},e.prototype.removeFilledLines=function(){for(var e=0,t=0;t<this._map.length;t++){if(this._map[t].every(function(e){return e.filled})){e++,this._map.splice(t,1);for(var r=[],o=0;o<this._width;o++)r[o]=new n.Cell;this._map.unshift(r)}}return e},e.prototype.draw=function(){for(var e=0;e<this._map.length;e++)for(var t=0;t<this._map[e].length;t++){var r=this._map[e][t];r.filled&&o.canvas2D.drawRectAtCell(e,t,r.color,i.GAME_CONFIG.STROKE_COLOR,i.GAME_CONFIG.CELL_SIZE)}},e}();t.GameMap=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this._filled=!1}return Object.defineProperty(e.prototype,"color",{get:function(){return this._color},set:function(e){this._color=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"filled",{get:function(){return this._filled},set:function(e){this._filled=e},enumerable:!0,configurable:!0}),e}();t.Cell=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(4),o=r(1),i=r(10),a=function(){function e(){}return e.prototype.createShape=function(e,t,r,a){void 0===a&&(a=1);var s,c=[];switch(e){case n.ShapeType.I:c=[new o.Vector2(t.X,t.Y),new o.Vector2(t.X,t.Y+1*a),new o.Vector2(t.X,t.Y+2*a),new o.Vector2(t.X,t.Y+3*a)],s=new o.Vector2(t.X,t.Y+1*a);break;case n.ShapeType.J:c=[new o.Vector2(t.X,t.Y),new o.Vector2(t.X,t.Y+1*a),new o.Vector2(t.X,t.Y+2*a),new o.Vector2(t.X-1*a,t.Y+2*a)],s=new o.Vector2(t.X,t.Y+1*a);break;case n.ShapeType.L:c=[new o.Vector2(t.X,t.Y),new o.Vector2(t.X,t.Y+1*a),new o.Vector2(t.X,t.Y+2*a),new o.Vector2(t.X+1*a,t.Y+2*a)],s=new o.Vector2(t.X,t.Y+1*a);break;case n.ShapeType.O:c=[new o.Vector2(t.X,t.Y),new o.Vector2(t.X+1*a,t.Y),new o.Vector2(t.X,t.Y+1*a),new o.Vector2(t.X+1*a,t.Y+1*a)],s=null;break;case n.ShapeType.S:c=[new o.Vector2(t.X,t.Y),new o.Vector2(t.X+1*a,t.Y),new o.Vector2(t.X,t.Y+1*a),new o.Vector2(t.X-1*a,t.Y+1*a)],s=new o.Vector2(t.X,t.Y+1*a);break;case n.ShapeType.Z:c=[new o.Vector2(t.X,t.Y),new o.Vector2(t.X-1*a,t.Y),new o.Vector2(t.X,t.Y+1*a),new o.Vector2(t.X+1*a,t.Y+1*a)],s=new o.Vector2(t.X,t.Y+1*a);break;case n.ShapeType.T:c=[new o.Vector2(t.X,t.Y),new o.Vector2(t.X,t.Y+1*a),new o.Vector2(t.X-1*a,t.Y+1*a),new o.Vector2(t.X+1*a,t.Y+1*a)],s=new o.Vector2(t.X,t.Y+1*a)}return new i.Shape(e,c,s,r)},e}();t.ShapeFactory=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t,r,n){this._cells=[],this._color="",this._origin=null,this._shapeType=e,this._cells=t,this._color=n,this._origin=r}return Object.defineProperty(e.prototype,"shapeType",{get:function(){return this._shapeType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"cells",{get:function(){return this._cells},set:function(e){this._cells=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"origin",{get:function(){return this._origin},set:function(e){this._origin=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"color",{get:function(){return this._color},set:function(e){this._color=e},enumerable:!0,configurable:!0}),e.prototype.isPartOfShape=function(e){return this._cells.some(function(t){return t.X===e.X&&t.Y===e.Y})},e.prototype.move=function(e,t){void 0===e&&(e=0),void 0===t&&(t=0),this._origin&&this._origin.addToX(e).addToY(t),this.cells.forEach(function(r){return r.addToX(e).addToY(t)})},e}();t.Shape=n}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,