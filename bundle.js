(()=>{"use strict";var e,t,n,r,o={187:e=>{var t,n="object"==typeof Reflect?Reflect:null,r=n&&"function"==typeof n.apply?n.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};t=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var o=Number.isNaN||function(e){return e!=e};function i(){i.init.call(this)}e.exports=i,e.exports.once=function(e,t){return new Promise((function(n,r){function o(n){e.removeListener(t,i),r(n)}function i(){"function"==typeof e.removeListener&&e.removeListener("error",o),n([].slice.call(arguments))}d(e,t,i,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&d(e,"error",t,{once:!0})}(e,o)}))},i.EventEmitter=i,i.prototype._events=void 0,i.prototype._eventsCount=0,i.prototype._maxListeners=void 0;var s=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function p(e){return void 0===e._maxListeners?i.defaultMaxListeners:e._maxListeners}function c(e,t,n,r){var o,i,s,c;if(a(n),void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),i=e._events),s=i[t]),void 0===s)s=i[t]=n,++e._eventsCount;else if("function"==typeof s?s=i[t]=r?[n,s]:[s,n]:r?s.unshift(n):s.push(n),(o=p(e))>0&&s.length>o&&!s.warned){s.warned=!0;var h=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");h.name="MaxListenersExceededWarning",h.emitter=e,h.type=t,h.count=s.length,c=h,console&&console.warn&&console.warn(c)}return e}function h(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function u(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},o=h.bind(r);return o.listener=n,r.wrapFn=o,o}function f(e,t,n){var r=e._events;if(void 0===r)return[];var o=r[t];return void 0===o?[]:"function"==typeof o?n?[o.listener||o]:[o]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(o):_(o,o.length)}function l(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function _(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}function d(e,t,n,r){if("function"==typeof e.on)r.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function o(i){r.once&&e.removeEventListener(t,o),n(i)}))}}Object.defineProperty(i,"defaultMaxListeners",{enumerable:!0,get:function(){return s},set:function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");s=e}}),i.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},i.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},i.prototype.getMaxListeners=function(){return p(this)},i.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var o="error"===e,i=this._events;if(void 0!==i)o=o&&void 0===i.error;else if(!o)return!1;if(o){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var p=i[e];if(void 0===p)return!1;if("function"==typeof p)r(p,this,t);else{var c=p.length,h=_(p,c);for(n=0;n<c;++n)r(h[n],this,t)}return!0},i.prototype.addListener=function(e,t){return c(this,e,t,!1)},i.prototype.on=i.prototype.addListener,i.prototype.prependListener=function(e,t){return c(this,e,t,!0)},i.prototype.once=function(e,t){return a(t),this.on(e,u(this,e,t)),this},i.prototype.prependOnceListener=function(e,t){return a(t),this.prependListener(e,u(this,e,t)),this},i.prototype.removeListener=function(e,t){var n,r,o,i,s;if(a(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(o=-1,i=n.length-1;i>=0;i--)if(n[i]===t||n[i].listener===t){s=n[i].listener,o=i;break}if(o<0)return this;0===o?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,o),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,s||t)}return this},i.prototype.off=i.prototype.removeListener,i.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var o,i=Object.keys(n);for(r=0;r<i.length;++r)"removeListener"!==(o=i[r])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},i.prototype.listeners=function(e){return f(this,e,!0)},i.prototype.rawListeners=function(e){return f(this,e,!1)},i.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):l.call(e,t)},i.prototype.listenerCount=l,i.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},352:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GameWorld=void 0;var r=n(540),o=n(215),i=n(105),s=n(808),a=n(728),p=n(847),c=n(38),h=function(){function e(e,t){this._shapeTypesQueue=[],this._movingShape=null,this._shapeTypes=[s.ShapeType.I,s.ShapeType.J,s.ShapeType.L,s.ShapeType.O,s.ShapeType.S,s.ShapeType.Z,s.ShapeType.T],this._shapeFactory=new p.ShapeFactory,this._map=new a.GameMap(e,t),this._map.on("newShape",(function(e){c.SVGContext.drawShape(e,r.GAME_CONFIG.CELL_SIZE)})),this._map.on("leftShape",(function(e){c.SVGContext.updateShape(e,r.GAME_CONFIG.CELL_SIZE)})),this._map.on("rightShape",(function(e){c.SVGContext.updateShape(e,r.GAME_CONFIG.CELL_SIZE)})),this._map.on("downShape",(function(e){c.SVGContext.updateShape(e,r.GAME_CONFIG.CELL_SIZE)})),this._map.on("rotateShape",(function(e){c.SVGContext.redrawShape(e,r.GAME_CONFIG.CELL_SIZE)})),this._map.on("changeShape",(function(e){c.SVGContext.redrawShape(e,r.GAME_CONFIG.CELL_SIZE)})),this._map.on("destroyShape",(function(e){c.SVGContext.destroyShape(e)})),this.init()}return Object.defineProperty(e.prototype,"gameOver",{get:function(){return this._gameOver},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"score",{get:function(){return this._score},enumerable:!1,configurable:!0}),e.prototype.increaseScore=function(e){this._score+=e},e.prototype.handleInput=function(){o.keyboard.isPressed(r.GAME_CONFIG.UP_KEY)?this._map.doShapeAction(this._movingShape,"rotate"):o.keyboard.isPressed(r.GAME_CONFIG.DOWN_KEY)?(this._map.doShapeAction(this._movingShape,"down"),this.increaseScore(r.GAME_CONFIG.LOWERED_SHAPE_BONUS)):o.keyboard.isPressed(r.GAME_CONFIG.LEFT_KEY)?this._map.doShapeAction(this._movingShape,"left"):o.keyboard.isPressed(r.GAME_CONFIG.RIGHT_KEY)&&this._map.doShapeAction(this._movingShape,"right")},e.prototype.handleFilledLines=function(){var e=this._map.removeFilledLines();e>0&&(this.increaseScore(e*r.GAME_CONFIG.FILLED_LINE_BONUS),this._updateEveryXFrames>0&&this._updateEveryXFrames--)},e.prototype.generateRandomShapeType=function(){var e=Math.floor(Math.random()*this._shapeTypes.length);return this._shapeTypes[e]},e.prototype.buildShape=function(e){var t=Math.floor(Math.random()*this._shapeTypes.length),n=r.GAME_CONFIG.SHAPE_COLORS[t];return this._shapeFactory.createShape(e,new i.Vector2(Math.floor(this._map.width/2),3),n)},e.prototype.init=function(){this._gameOver=!1,this._score=0,this._frame=0,this._updateEveryXFrames=r.GAME_CONFIG.UPDATE_AFTER_X_FRAMES,this._map.init();var e=this.generateRandomShapeType();this._shapeTypesQueue=[e],this._movingShape=this.buildShape(this.generateRandomShapeType()),this._map.addShape(this._movingShape)},e.prototype.update=function(){if(this.handleInput(),!(++this._frame%this._updateEveryXFrames||this._map.doShapeAction(this._movingShape,"down"))){this.handleFilledLines();var e=this.generateRandomShapeType();this._shapeTypesQueue.unshift(e),this._movingShape=this.buildShape(this._shapeTypesQueue.pop()),this._gameOver=!this._map.addShape(this._movingShape)}},e.prototype.draw=function(){},e}();t.GameWorld=h},38:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SVGContext=void 0;var r=n(540),o=n(105),i=function(){function e(e){this._shapes=new Map,this._svg=e}return e.prototype.clear=function(){this._svg.innerHTML=""},e.prototype.drawShape=function(e,t){var n=this;if(this._shapes.has(e))return this._shapes.get(e);var o=document.createElementNS("http://www.w3.org/2000/svg","svg");if(e.cells.forEach((function(r){var i=n.drawCell(r,t,e.color);o.appendChild(i)})),r.GAME_CONFIG.SHOW_ORIGINS){var i=document.createElementNS("http://www.w3.org/2000/svg","circle");i.setAttribute("cx",(e.origin.X*t).toString()),i.setAttribute("cy",(e.origin.Y*t).toString()),i.setAttribute("r","5"),i.setAttribute("fill","#FFFFFF"),o.appendChild(i)}return o.setAttribute("x",(e.position.X*t).toString()),o.setAttribute("y",(e.position.Y*t).toString()),this._svg.appendChild(o),this._shapes.set(e,o),o},e.prototype.drawCell=function(e,t,n){var r=document.createElementNS("http://www.w3.org/2000/svg","g"),i=document.createElementNS("http://www.w3.org/2000/svg","rect");if(i.setAttribute("x",(e.coords.X*t+t/20).toString()),i.setAttribute("y",(e.coords.Y*t+t/20).toString()),i.setAttribute("width",(t-t/10).toString()),i.setAttribute("height",(t-t/10).toString()),i.setAttribute("ry",(t/10).toString()),i.setAttribute("rx",(t/10).toString()),i.setAttribute("fill",n),r.appendChild(i),!e.shape.cells.find((function(t){return e.coords.X===t.coords.X&&e.coords.Y-1===t.coords.Y}))){var s=document.createElementNS("http://www.w3.org/2000/svg","path"),a=[{command:"M",coords:new o.Vector2(0,0)},{command:"L",coords:new o.Vector2(t/5,t/5)},{command:"L",coords:new o.Vector2(t-t/5,t/5)},{command:"L",coords:new o.Vector2(t,0)},{command:"L",coords:new o.Vector2(0,0)}].map((function(n){return"".concat(n.command).concat(e.coords.X*t+n.coords.X," ").concat(e.coords.Y*t+n.coords.Y)})).join(" ");s.setAttribute("d",a),s.setAttribute("fill","#F0F0F0"),s.setAttribute("fill-opacity","0.40"),r.appendChild(s)}return r},e.prototype.updateShape=function(e,t){if(this._shapes.has(e)){var n=this._shapes.get(e);n.setAttribute("y",(e.position.Y*t).toString()),n.setAttribute("x",(e.position.X*t).toString())}},e.prototype.destroyShape=function(e){this._shapes.has(e)&&(this._shapes.get(e).remove(),this._shapes.delete(e))},e.prototype.redrawShape=function(e,t){var n=this;if(this._shapes.has(e)){var o=this._shapes.get(e);if(o.innerHTML="",e.cells.forEach((function(r){var i=n.drawCell(r,t,e.color);o.appendChild(i)})),r.GAME_CONFIG.SHOW_ORIGINS){var i=document.createElementNS("http://www.w3.org/2000/svg","circle");i.setAttribute("cx",(e.origin.X*t).toString()),i.setAttribute("cy",(e.origin.Y*t).toString()),i.setAttribute("r","5"),i.setAttribute("fill","#FFFFFF"),o.appendChild(i)}o.setAttribute("x",(e.position.X*t).toString()),o.setAttribute("y",(e.position.Y*t).toString())}},e}(),s=document.getElementById("game");t.SVGContext=new i(s)},540:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GAME_CONFIG=void 0,t.GAME_CONFIG={SHOW_ORIGINS:!1,UPDATE_AFTER_X_FRAMES:40,GAME_WIDTH:15,GAME_HEIGHT:20,CANVAS_MIN_WIDTH:300,CANVAS_MIN_HEIGHT:400,CELL_SIZE:20,NEXT_SHAPE_CELL_SIZE:5,STROKE_WIDTH:.5,BACKGROUND_COLOR:"#28363B",STROKE_COLOR:"black",SHAPE_COLORS:["#F9B38F","#BF6C86","#84AF9C","#6D5C80","#FFA3D0","#439F9E","#EF5F3C"],SCORE_LABEL_FONT:"10px Comic Sans MS",NEXT_SHAPE_LABEL_FONT:"10px Comic Sans MS",GAME_OVER_LABEL_FONT:"25px Comic Sans MS",GAME_OVER_YOUR_SCORE_LABEL_FONT:"15px Comic Sans MS",FONT_COLOR:"white",SCORE_LABEL:"Score: ",NEXT_SHAPE_LABEL:"Next Shape: ",GAME_OVER_LABEL:"Game Over!",GAME_OVER_YOUR_SCORE_LABEL:"Your Score: ",NEXT_SHAPE_POSITION:{X:283,Y:6},SCORE_LABEL_POSITION:{X:5,Y:13,ALIGNMENT:"left"},NEXT_SHAPE_LABEL_POSITION:{X:215,Y:13,ALIGNMENT:"left"},GAME_OVER_LABEL_POSITION:{X:150,Y:200,ALIGNMENT:"center"},GAME_OVER_YOUR_SCORE_LABEL_POSITION:{X:150,Y:235,ALIGNMENT:"center"},START_KEY:32,LEFT_KEY:37,RIGHT_KEY:39,UP_KEY:38,DOWN_KEY:40,DROP:13,FILLED_LINE_BONUS:100,DROPPED_SHAPE_BONUS:2,LOWERED_SHAPE_BONUS:1}},105:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Vector2=void 0;var n=function(){function e(e,t){this._x=e,this._y=t}return Object.defineProperty(e.prototype,"X",{get:function(){return this._x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"Y",{get:function(){return this._y},enumerable:!1,configurable:!0}),Object.defineProperty(e,"Zero",{get:function(){return new e(0,0)},enumerable:!1,configurable:!0}),e.prototype.addX=function(t){return new e(this._x,this._y).addToX(t)},e.prototype.addY=function(t){return new e(this._x,this._y).addToY(t)},e.prototype.addToX=function(e){return this._x+=e,this},e.prototype.addToY=function(e){return this._y+=e,this},e.prototype.add=function(e,t){return this.addToX(e),this.addToY(t),this},e}();t.Vector2=n},215:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.keyboard=void 0;var n=function(){function e(){var e=this;this._keysPressed=[],document.addEventListener("keydown",(function(t){e.keyDown(t)}))}return e.prototype.keyDown=function(e){this._keysPressed[e.keyCode]=!0},e.prototype.reset=function(){this._keysPressed=[]},e.prototype.isPressed=function(e){return this._keysPressed[e]},e}();t.keyboard=new n},728:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.GameMap=void 0;var i=function(e){function t(t,n){var r=e.call(this)||this;return r._shapes=[],r._width=t,r._height=n,r.init(),r}return o(t,e),Object.defineProperty(t.prototype,"height",{get:function(){return this._height},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"width",{get:function(){return this._width},enumerable:!1,configurable:!0}),t.prototype.init=function(){this._map=[];for(var e=0;e<this._height;e++){this._map[e]=[];for(var t=0;t<this._width;t++)this._map[e][t]=void 0}},t.prototype.addShape=function(e){return!!this.isShapeValidPlace(e)&&(this._shapes.push(e),this.emit("newShape",e),this.cacheShapeCells(e),!0)},t.prototype.doShapeAction=function(e,t){var n=e.clone();return n.do(t),!!this.isShapeValidPlace(n,e)&&(this.clearShapeCache(e),e.do(t),this.cacheShapeCells(e),this.emit("".concat(t,"Shape"),e),!0)},t.prototype.removeShape=function(e){var t=this._shapes.indexOf(e,0);t>-1&&(this.clearShapeCache(e),this._shapes.splice(t,1))},t.prototype.isInMap=function(e){var t=[e.X,e.Y],n=t[0],r=t[1];return n>=0&&n<this._width&&r>=0&&r<this._height},t.prototype.getCell=function(e){if(this.isInMap(e)&&void 0!==this._map[e.Y][e.X])return this._map[e.Y][e.X]},t.prototype.isCellFilled=function(e){return!!this.getCell(e)},t.prototype.clearShapeCache=function(e){var t=this;e.cells.forEach((function(e){t.isInMap(e.position)&&(t._map[e.Y][e.X]=void 0)}))},t.prototype.cacheShapeCells=function(e){var t=this;e.cells.forEach((function(e){t.isInMap(e.position)&&(t._map[e.Y][e.X]=e)}))},t.prototype.anyFilledOnRow=function(e){return this._map[e].some((function(e){return void 0!==e}))},t.prototype.isShapeValidPlace=function(e,t){var n=this;return e.cells.every((function(e){if(!n.isInMap(e.position))return!1;var r=n.getCell(e.position);return!r||!!t&&t.isPartOfShape(r)}))},t.prototype.removeFilledLines=function(){for(var e=this,t=0,n=0;n<this._map.length;n++)if(this._map[n].every((function(e){return void 0!==e}))){t++,this._map[n].forEach((function(t){var n=e._shapes.find((function(e){return e.cells.includes(t)}));n.removeCell(t),0===n.cells.length?(e.removeShape(n),e.emit("destroyShape",n)):e.emit("changeShape",n)}));for(var r=0;r<n;r++)this._map[r].forEach((function(t){t&&(t.coords.addToY(1),e.emit("changeShape",t.shape))}));this._map.splice(n,1);for(var o=[],i=0;i<this._width;i++)o[i]=void 0;this._map.unshift(o)}return t},t}(n(187).EventEmitter);t.GameMap=i},185:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Cell=void 0;var r=n(105),o=function(){function e(e,t){this._shape=t,this._coords=e}return Object.defineProperty(e.prototype,"coords",{get:function(){return this._coords},set:function(e){this._coords=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"shape",{get:function(){return this._shape},set:function(e){this._shape=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"position",{get:function(){return new r.Vector2(this.X,this.Y)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"X",{get:function(){return this._shape.position.X+this._coords.X},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"Y",{get:function(){return this._shape.position.Y+this._coords.Y},enumerable:!1,configurable:!0}),e}();t.Cell=o},189:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.Shape=void 0;var i=n(105),s=n(185),a=function(){function e(){}return e.prototype.move=function(e,t,n){void 0===t&&(t=0),void 0===n&&(n=0),e.position.addToX(t).addToY(n)},e}(),p=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.name="down",t}return o(t,e),t.prototype.do=function(e){this.move(e,0,1)},t}(a),c=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.name="right",t}return o(t,e),t.prototype.do=function(e){this.move(e,1,0)},t}(a),h=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.name="left",t}return o(t,e),t.prototype.do=function(e){this.move(e,-1,0)},t}(a),u=function(){function e(){this.name="rotate"}return e.prototype.do=function(e){e.cells.forEach((function(t){var n=t.coords.X,r=t.coords.Y+e.origin.X-e.origin.Y,o=e.origin.X+e.origin.Y-n-1;t.coords=new i.Vector2(r,o)}))},e}(),f=function(){function e(e,t,n,r){void 0===r&&(r=new i.Vector2(.5,.5));var o=this;this._cells=[],this._color="",this._position=null,this._origin=null,this._actions=[new p,new h,new c,new u],this._cells=e,this._cells.forEach((function(e){return e.shape=o})),this._position=t,this._color=n,this._origin=r}return Object.defineProperty(e.prototype,"cells",{get:function(){return this._cells},set:function(e){this._cells=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"position",{get:function(){return this._position},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"color",{get:function(){return this._color},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"origin",{get:function(){return this._origin},enumerable:!1,configurable:!0}),e.prototype.do=function(e){this._actions.find((function(t){return t.name===e})).do(this)},e.prototype.removeCell=function(e){var t=this._cells.indexOf(e,0);t>-1&&this._cells.splice(t,1)},e.prototype.isPartOfShape=function(e){return this._cells.includes(e)},e.prototype.clone=function(){return new e(this._cells.map((function(e){return new s.Cell(e.coords)})),new i.Vector2(this._position.X,this._position.Y),this._color,new i.Vector2(this._origin.X,this._origin.Y))},e}();t.Shape=f},847:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ShapeFactory=void 0;var r=n(808),o=n(105),i=n(189),s=n(185),a=function(){function e(){}return e.prototype.createShape=function(e,t,n){var a,p=[];switch(e){case r.ShapeType.I:p=[new o.Vector2(0,-1),new o.Vector2(0,0),new o.Vector2(0,1),new o.Vector2(0,2)].map((function(e){return new s.Cell(e)})),a=new o.Vector2(0,1);break;case r.ShapeType.J:p=[new o.Vector2(0,-1),new o.Vector2(0,0),new o.Vector2(0,1),new o.Vector2(-1,1)].map((function(e){return new s.Cell(e)}));break;case r.ShapeType.L:p=[new o.Vector2(0,-1),new o.Vector2(0,0),new o.Vector2(0,1),new o.Vector2(1,1)].map((function(e){return new s.Cell(e)}));break;case r.ShapeType.O:p=[new o.Vector2(-1,0),new o.Vector2(0,0),new o.Vector2(0,1),new o.Vector2(-1,1)].map((function(e){return new s.Cell(e)})),a=new o.Vector2(0,1);break;case r.ShapeType.S:p=[new o.Vector2(0,0),new o.Vector2(1,0),new o.Vector2(0,1),new o.Vector2(-1,1)].map((function(e){return new s.Cell(e)}));break;case r.ShapeType.Z:p=[new o.Vector2(0,0),new o.Vector2(-1,0),new o.Vector2(0,1),new o.Vector2(1,1)].map((function(e){return new s.Cell(e)}));break;case r.ShapeType.T:p=[new o.Vector2(0,0),new o.Vector2(0,1),new o.Vector2(-1,1),new o.Vector2(1,1)].map((function(e){return new s.Cell(e)})),a=new o.Vector2(.5,1.5)}return new i.Shape(p,new o.Vector2(t.X,t.Y),n,a)},e}();t.ShapeFactory=a},808:(e,t)=>{var n;Object.defineProperty(t,"__esModule",{value:!0}),t.ShapeType=void 0,(n=t.ShapeType||(t.ShapeType={}))[n.I=0]="I",n[n.J=1]="J",n[n.L=2]="L",n[n.S=3]="S",n[n.Z=4]="Z",n[n.O=5]="O",n[n.T=6]="T"}},i={};function s(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={exports:{}};return o[e].call(n.exports,n,n.exports,s),n.exports}t=s(352),n=s(215),r=s(540),e=new t.GameWorld(r.GAME_CONFIG.GAME_WIDTH,r.GAME_CONFIG.GAME_HEIGHT),function t(){e.gameOver||(e.update(),e.draw()),n.keyboard.reset(),requestAnimationFrame(t)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,