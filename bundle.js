(()=>{"use strict";var t,e,n,r,i={500:(t,e,n)=>{n.r(e),n.d(e,{A:()=>cn,Animator:()=>ze,Array:()=>It,Box:()=>mt,Circle:()=>sn,ClipPath:()=>on,Color:()=>ut,Container:()=>Dt,Controller:()=>de,Defs:()=>Vt,Dom:()=>Ft,Ease:()=>pe,Element:()=>Rt,Ellipse:()=>Kt,EventTarget:()=>At,ForeignObject:()=>hn,Fragment:()=>Qt,G:()=>un,Gradient:()=>re,Image:()=>se,Line:()=>ae,List:()=>yt,Marker:()=>ue,Mask:()=>ln,Matrix:()=>ft,Morphable:()=>Te,NonMorphable:()=>Le,Number:()=>Pt,ObjectBag:()=>Ie,PID:()=>ye,Path:()=>Re,PathArray:()=>Ce,Pattern:()=>ie,Point:()=>ct,PointArray:()=>oe,Polygon:()=>De,Polyline:()=>Ve,Queue:()=>Xe,Rect:()=>Ye,Runner:()=>Ue,SVG:()=>_n,Shape:()=>Yt,Spring:()=>_e,Stop:()=>fn,Style:()=>pn,Svg:()=>Je,Symbol:()=>tn,Text:()=>nn,TextPath:()=>dn,Timeline:()=>He,TransformBag:()=>Ne,Tspan:()=>rn,Use:()=>mn,adopt:()=>F,assignNewId:()=>z,clearEvents:()=>St,create:()=>I,defaults:()=>kt,dispatch:()=>Ct,easing:()=>le,eid:()=>X,extend:()=>q,find:()=>gt,getClass:()=>V,getEventTarget:()=>Ot,getEvents:()=>xt,getWindow:()=>T,makeInstance:()=>P,makeMorphable:()=>Fe,mockAdopt:()=>G,namespaces:()=>x,nodeOrNew:()=>j,off:()=>Mt,on:()=>Et,parser:()=>pt,regex:()=>st,register:()=>D,registerMorphableType:()=>je,registerWindow:()=>S,restoreWindow:()=>C,root:()=>k,saveWindow:()=>M,utils:()=>_,windowEvents:()=>bt,withWindow:()=>A,wrapWithAttrCheck:()=>B});const r={},i=[];function s(t,e){if(Array.isArray(t))for(const n of t)s(n,e);else if("object"!=typeof t)h(Object.getOwnPropertyNames(e)),r[t]=Object.assign(r[t]||{},e);else for(const e in t)s(e,t[e])}function o(t){return r[t]||{}}function h(t){i.push(...t)}function a(t,e){let n;const r=t.length,i=[];for(n=0;n<r;n++)i.push(e(t[n]));return i}function u(t,e){let n;const r=t.length,i=[];for(n=0;n<r;n++)e(t[n])&&i.push(t[n]);return i}function c(t){return t%360*Math.PI/180}function l(t){return t.toLowerCase().replace(/-(.)/g,(function(t,e){return e.toUpperCase()}))}function f(t){return t.replace(/([A-Z])/g,(function(t,e){return"-"+e.toLowerCase()}))}function p(t){return t.charAt(0).toUpperCase()+t.slice(1)}function d(t,e,n,r){return null!=e&&null!=n||(r=r||t.bbox(),null==e?e=r.width/r.height*n:null==n&&(n=r.height/r.width*e)),{width:e,height:n}}function m(t,e){const n=t.origin;let r=null!=t.ox?t.ox:null!=t.originX?t.originX:"center",i=null!=t.oy?t.oy:null!=t.originY?t.originY:"center";null!=n&&([r,i]=Array.isArray(n)?n:"object"==typeof n?[n.x,n.y]:[n,n]);const s="string"==typeof r,o="string"==typeof i;if(s||o){const{height:t,width:n,x:h,y:a}=e.bbox();s&&(r=r.includes("left")?h:r.includes("right")?h+n:h+n/2),o&&(i=i.includes("top")?a:i.includes("bottom")?a+t:a+t/2)}return[r,i]}var _={__proto__:null,map:a,filter:u,radians:c,degrees:function(t){return 180*t/Math.PI%360},camelCase:l,unCamelCase:f,capitalize:p,proportionalSize:d,getOrigin:m};const y="http://www.w3.org/2000/svg",w="http://www.w3.org/1999/xhtml",g="http://www.w3.org/2000/xmlns/",v="http://www.w3.org/1999/xlink",b="http://svgjs.dev/svgjs";var x={__proto__:null,svg:y,html:w,xmlns:g,xlink:v,svgjs:b};const O={window:"undefined"==typeof window?null:window,document:"undefined"==typeof document?null:document};function S(t=null,e=null){O.window=t,O.document=e}const E={};function M(){E.window=O.window,E.document=O.document}function C(){O.window=E.window,O.document=E.document}function A(t,e){M(),S(t,t.document),e(t,t.document),C()}function T(){return O.window}class L{}const N={},k="___SYMBOL___ROOT___";function I(t,e=y){return O.document.createElementNS(e,t)}function P(t,e=!1){if(t instanceof L)return t;if("object"==typeof t)return R(t);if(null==t)return new N[k];if("string"==typeof t&&"<"!==t.charAt(0))return R(O.document.querySelector(t));const n=e?O.document.createElement("div"):I("svg");return n.innerHTML=t,t=R(n.firstChild),n.removeChild(n.firstChild),t}function j(t,e){return e&&e.ownerDocument&&e instanceof e.ownerDocument.defaultView.Node?e:I(t)}function F(t){if(!t)return null;if(t.instance instanceof L)return t.instance;if("#document-fragment"===t.nodeName)return new N.Fragment(t);let e=p(t.nodeName||"Dom");return"LinearGradient"===e||"RadialGradient"===e?e="Gradient":N[e]||(e="Dom"),new N[e](t)}let R=F;function G(t=F){R=t}function D(t,e=t.name,n=!1){return N[e]=t,n&&(N[k]=t),h(Object.getOwnPropertyNames(t.prototype)),t}function V(t){return N[t]}let Y=1e3;function X(t){return"Svgjs"+p(t)+Y++}function z(t){for(let e=t.children.length-1;e>=0;e--)z(t.children[e]);return t.id?(t.id=X(t.nodeName),t):t}function q(t,e){let n,r;for(r=(t=Array.isArray(t)?t:[t]).length-1;r>=0;r--)for(n in e)t[r].prototype[n]=e[n]}function B(t){return function(...e){const n=e[e.length-1];return!n||n.constructor!==Object||n instanceof Array?t.apply(this,e):t.apply(this,e.slice(0,-1)).attr(n)}}s("Dom",{siblings:function(){return this.parent().children()},position:function(){return this.parent().index(this)},next:function(){return this.siblings()[this.position()+1]},prev:function(){return this.siblings()[this.position()-1]},forward:function(){const t=this.position();return this.parent().add(this.remove(),t+1),this},backward:function(){const t=this.position();return this.parent().add(this.remove(),t?t-1:0),this},front:function(){return this.parent().add(this.remove()),this},back:function(){return this.parent().add(this.remove(),0),this},before:function(t){(t=P(t)).remove();const e=this.position();return this.parent().add(t,e),this},after:function(t){(t=P(t)).remove();const e=this.position();return this.parent().add(t,e+1),this},insertBefore:function(t){return(t=P(t)).before(this),this},insertAfter:function(t){return(t=P(t)).after(this),this}});const H=/^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i,U=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,W=/rgb\((\d+),(\d+),(\d+)\)/,Z=/(#[a-z_][a-z0-9\-_]*)/i,$=/\)\s*,?\s*/,K=/\s/g,Q=/^#[a-f0-9]{3}$|^#[a-f0-9]{6}$/i,J=/^rgb\(/,tt=/^(\s+)?$/,et=/^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,nt=/\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i,rt=/[\s,]+/,it=/[MLHVCSQTAZ]/i;var st={__proto__:null,numberAndUnit:H,hex:U,rgb:W,reference:Z,transforms:$,whitespace:K,isHex:Q,isRgb:J,isBlank:tt,isNumber:et,isImage:nt,delimiter:rt,isPathLetter:it};function ot(t){const e=Math.round(t),n=Math.max(0,Math.min(255,e)).toString(16);return 1===n.length?"0"+n:n}function ht(t,e){for(let n=e.length;n--;)if(null==t[e[n]])return!1;return!0}function at(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+(e-t)*(2/3-n)*6:t}s("Dom",{classes:function(){const t=this.attr("class");return null==t?[]:t.trim().split(rt)},hasClass:function(t){return-1!==this.classes().indexOf(t)},addClass:function(t){if(!this.hasClass(t)){const e=this.classes();e.push(t),this.attr("class",e.join(" "))}return this},removeClass:function(t){return this.hasClass(t)&&this.attr("class",this.classes().filter((function(e){return e!==t})).join(" ")),this},toggleClass:function(t){return this.hasClass(t)?this.removeClass(t):this.addClass(t)}}),s("Dom",{css:function(t,e){const n={};if(0===arguments.length)return this.node.style.cssText.split(/\s*;\s*/).filter((function(t){return!!t.length})).forEach((function(t){const e=t.split(/\s*:\s*/);n[e[0]]=e[1]})),n;if(arguments.length<2){if(Array.isArray(t)){for(const e of t){const t=l(e);n[e]=this.node.style[t]}return n}if("string"==typeof t)return this.node.style[l(t)];if("object"==typeof t)for(const e in t)this.node.style[l(e)]=null==t[e]||tt.test(t[e])?"":t[e]}return 2===arguments.length&&(this.node.style[l(t)]=null==e||tt.test(e)?"":e),this},show:function(){return this.css("display","")},hide:function(){return this.css("display","none")},visible:function(){return"none"!==this.css("display")}}),s("Dom",{data:function(t,e,n){if(null==t)return this.data(a(u(this.node.attributes,(t=>0===t.nodeName.indexOf("data-"))),(t=>t.nodeName.slice(5))));if(t instanceof Array){const e={};for(const n of t)e[n]=this.data(n);return e}if("object"==typeof t)for(e in t)this.data(e,t[e]);else if(arguments.length<2)try{return JSON.parse(this.attr("data-"+t))}catch(e){return this.attr("data-"+t)}else this.attr("data-"+t,null===e?null:!0===n||"string"==typeof e||"number"==typeof e?e:JSON.stringify(e));return this}}),s("Dom",{remember:function(t,e){if("object"==typeof arguments[0])for(const e in t)this.remember(e,t[e]);else{if(1===arguments.length)return this.memory()[t];this.memory()[t]=e}return this},forget:function(){if(0===arguments.length)this._memory={};else for(let t=arguments.length-1;t>=0;t--)delete this.memory()[arguments[t]];return this},memory:function(){return this._memory=this._memory||{}}});class ut{constructor(...t){this.init(...t)}static isColor(t){return t&&(t instanceof ut||this.isRgb(t)||this.test(t))}static isRgb(t){return t&&"number"==typeof t.r&&"number"==typeof t.g&&"number"==typeof t.b}static random(t="vibrant",e,n){const{random:r,round:i,sin:s,PI:o}=Math;if("vibrant"===t){const t=24*r()+57,e=38*r()+45,n=360*r();return new ut(t,e,n,"lch")}if("sine"===t){const t=i(80*s(2*o*(e=null==e?r():e)/.5+.01)+150),n=i(50*s(2*o*e/.5+4.6)+200),h=i(100*s(2*o*e/.5+2.3)+150);return new ut(t,n,h)}if("pastel"===t){const t=8*r()+86,e=17*r()+9,n=360*r();return new ut(t,e,n,"lch")}if("dark"===t){const t=10+10*r(),e=50*r()+86,n=360*r();return new ut(t,e,n,"lch")}if("rgb"===t){const t=255*r(),e=255*r(),n=255*r();return new ut(t,e,n)}if("lab"===t){const t=100*r(),e=256*r()-128,n=256*r()-128;return new ut(t,e,n,"lab")}if("grey"===t){const t=255*r();return new ut(t,t,t)}throw new Error("Unsupported random color mode")}static test(t){return"string"==typeof t&&(Q.test(t)||J.test(t))}cmyk(){const{_a:t,_b:e,_c:n}=this.rgb(),[r,i,s]=[t,e,n].map((t=>t/255)),o=Math.min(1-r,1-i,1-s);return 1===o?new ut(0,0,0,1,"cmyk"):new ut((1-r-o)/(1-o),(1-i-o)/(1-o),(1-s-o)/(1-o),o,"cmyk")}hsl(){const{_a:t,_b:e,_c:n}=this.rgb(),[r,i,s]=[t,e,n].map((t=>t/255)),o=Math.max(r,i,s),h=Math.min(r,i,s),a=(o+h)/2,u=o===h,c=o-h;return new ut(360*(u?0:o===r?((i-s)/c+(i<s?6:0))/6:o===i?((s-r)/c+2)/6:o===s?((r-i)/c+4)/6:0),100*(u?0:a>.5?c/(2-o-h):c/(o+h)),100*a,"hsl")}init(t=0,e=0,n=0,r=0,i="rgb"){if(t=t||0,this.space)for(const t in this.space)delete this[this.space[t]];if("number"==typeof t)i="string"==typeof r?r:i,r="string"==typeof r?0:r,Object.assign(this,{_a:t,_b:e,_c:n,_d:r,space:i});else if(t instanceof Array)this.space=e||("string"==typeof t[3]?t[3]:t[4])||"rgb",Object.assign(this,{_a:t[0],_b:t[1],_c:t[2],_d:t[3]||0});else if(t instanceof Object){const n=function(t,e){const n=ht(t,"rgb")?{_a:t.r,_b:t.g,_c:t.b,_d:0,space:"rgb"}:ht(t,"xyz")?{_a:t.x,_b:t.y,_c:t.z,_d:0,space:"xyz"}:ht(t,"hsl")?{_a:t.h,_b:t.s,_c:t.l,_d:0,space:"hsl"}:ht(t,"lab")?{_a:t.l,_b:t.a,_c:t.b,_d:0,space:"lab"}:ht(t,"lch")?{_a:t.l,_b:t.c,_c:t.h,_d:0,space:"lch"}:ht(t,"cmyk")?{_a:t.c,_b:t.m,_c:t.y,_d:t.k,space:"cmyk"}:{_a:0,_b:0,_c:0,space:"rgb"};return n.space=e||n.space,n}(t,e);Object.assign(this,n)}else if("string"==typeof t)if(J.test(t)){const e=t.replace(K,""),[n,r,i]=W.exec(e).slice(1,4).map((t=>parseInt(t)));Object.assign(this,{_a:n,_b:r,_c:i,_d:0,space:"rgb"})}else{if(!Q.test(t))throw Error("Unsupported string format, can't construct Color");{const e=t=>parseInt(t,16),[,n,r,i]=U.exec(function(t){return 4===t.length?["#",t.substring(1,2),t.substring(1,2),t.substring(2,3),t.substring(2,3),t.substring(3,4),t.substring(3,4)].join(""):t}(t)).map(e);Object.assign(this,{_a:n,_b:r,_c:i,_d:0,space:"rgb"})}}const{_a:s,_b:o,_c:h,_d:a}=this,u="rgb"===this.space?{r:s,g:o,b:h}:"xyz"===this.space?{x:s,y:o,z:h}:"hsl"===this.space?{h:s,s:o,l:h}:"lab"===this.space?{l:s,a:o,b:h}:"lch"===this.space?{l:s,c:o,h}:"cmyk"===this.space?{c:s,m:o,y:h,k:a}:{};Object.assign(this,u)}lab(){const{x:t,y:e,z:n}=this.xyz();return new ut(116*e-16,500*(t-e),200*(e-n),"lab")}lch(){const{l:t,a:e,b:n}=this.lab(),r=Math.sqrt(e**2+n**2);let i=180*Math.atan2(n,e)/Math.PI;return i<0&&(i*=-1,i=360-i),new ut(t,r,i,"lch")}rgb(){if("rgb"===this.space)return this;if("lab"===(t=this.space)||"xyz"===t||"lch"===t){let{x:t,y:e,z:n}=this;if("lab"===this.space||"lch"===this.space){let{l:r,a:i,b:s}=this;if("lch"===this.space){const{c:t,h:e}=this,n=Math.PI/180;i=t*Math.cos(n*e),s=t*Math.sin(n*e)}const o=(r+16)/116,h=i/500+o,a=o-s/200,u=16/116,c=.008856,l=7.787;t=.95047*(h**3>c?h**3:(h-u)/l),e=1*(o**3>c?o**3:(o-u)/l),n=1.08883*(a**3>c?a**3:(a-u)/l)}const r=3.2406*t+-1.5372*e+-.4986*n,i=-.9689*t+1.8758*e+.0415*n,s=.0557*t+-.204*e+1.057*n,o=Math.pow,h=.0031308,a=r>h?1.055*o(r,1/2.4)-.055:12.92*r,u=i>h?1.055*o(i,1/2.4)-.055:12.92*i,c=s>h?1.055*o(s,1/2.4)-.055:12.92*s;return new ut(255*a,255*u,255*c)}if("hsl"===this.space){let{h:t,s:e,l:n}=this;if(t/=360,e/=100,n/=100,0===e)return n*=255,new ut(n,n,n);const r=n<.5?n*(1+e):n+e-n*e,i=2*n-r,s=255*at(i,r,t+1/3),o=255*at(i,r,t),h=255*at(i,r,t-1/3);return new ut(s,o,h)}if("cmyk"===this.space){const{c:t,m:e,y:n,k:r}=this,i=255*(1-Math.min(1,t*(1-r)+r)),s=255*(1-Math.min(1,e*(1-r)+r)),o=255*(1-Math.min(1,n*(1-r)+r));return new ut(i,s,o)}return this;var t}toArray(){const{_a:t,_b:e,_c:n,_d:r,space:i}=this;return[t,e,n,r,i]}toHex(){const[t,e,n]=this._clamped().map(ot);return`#${t}${e}${n}`}toRgb(){const[t,e,n]=this._clamped();return`rgb(${t},${e},${n})`}toString(){return this.toHex()}xyz(){const{_a:t,_b:e,_c:n}=this.rgb(),[r,i,s]=[t,e,n].map((t=>t/255)),o=r>.04045?Math.pow((r+.055)/1.055,2.4):r/12.92,h=i>.04045?Math.pow((i+.055)/1.055,2.4):i/12.92,a=s>.04045?Math.pow((s+.055)/1.055,2.4):s/12.92,u=(.4124*o+.3576*h+.1805*a)/.95047,c=(.2126*o+.7152*h+.0722*a)/1,l=(.0193*o+.1192*h+.9505*a)/1.08883,f=u>.008856?Math.pow(u,1/3):7.787*u+16/116,p=c>.008856?Math.pow(c,1/3):7.787*c+16/116,d=l>.008856?Math.pow(l,1/3):7.787*l+16/116;return new ut(f,p,d,"xyz")}_clamped(){const{_a:t,_b:e,_c:n}=this.rgb(),{max:r,min:i,round:s}=Math;return[t,e,n].map((t=>r(0,i(s(t),255))))}}class ct{constructor(...t){this.init(...t)}clone(){return new ct(this)}init(t,e){const n=Array.isArray(t)?{x:t[0],y:t[1]}:"object"==typeof t?{x:t.x,y:t.y}:{x:t,y:e};return this.x=null==n.x?0:n.x,this.y=null==n.y?0:n.y,this}toArray(){return[this.x,this.y]}transform(t){return this.clone().transformO(t)}transformO(t){ft.isMatrixLike(t)||(t=new ft(t));const{x:e,y:n}=this;return this.x=t.a*e+t.c*n+t.e,this.y=t.b*e+t.d*n+t.f,this}}function lt(t,e,n){return Math.abs(e-t)<(n||1e-6)}class ft{constructor(...t){this.init(...t)}static formatTransforms(t){const e="both"===t.flip||!0===t.flip,n=t.flip&&(e||"x"===t.flip)?-1:1,r=t.flip&&(e||"y"===t.flip)?-1:1,i=t.skew&&t.skew.length?t.skew[0]:isFinite(t.skew)?t.skew:isFinite(t.skewX)?t.skewX:0,s=t.skew&&t.skew.length?t.skew[1]:isFinite(t.skew)?t.skew:isFinite(t.skewY)?t.skewY:0,o=t.scale&&t.scale.length?t.scale[0]*n:isFinite(t.scale)?t.scale*n:isFinite(t.scaleX)?t.scaleX*n:n,h=t.scale&&t.scale.length?t.scale[1]*r:isFinite(t.scale)?t.scale*r:isFinite(t.scaleY)?t.scaleY*r:r,a=t.shear||0,u=t.rotate||t.theta||0,c=new ct(t.origin||t.around||t.ox||t.originX,t.oy||t.originY),l=c.x,f=c.y,p=new ct(t.position||t.px||t.positionX||NaN,t.py||t.positionY||NaN),d=p.x,m=p.y,_=new ct(t.translate||t.tx||t.translateX,t.ty||t.translateY),y=_.x,w=_.y,g=new ct(t.relative||t.rx||t.relativeX,t.ry||t.relativeY);return{scaleX:o,scaleY:h,skewX:i,skewY:s,shear:a,theta:u,rx:g.x,ry:g.y,tx:y,ty:w,ox:l,oy:f,px:d,py:m}}static fromArray(t){return{a:t[0],b:t[1],c:t[2],d:t[3],e:t[4],f:t[5]}}static isMatrixLike(t){return null!=t.a||null!=t.b||null!=t.c||null!=t.d||null!=t.e||null!=t.f}static matrixMultiply(t,e,n){const r=t.a*e.a+t.c*e.b,i=t.b*e.a+t.d*e.b,s=t.a*e.c+t.c*e.d,o=t.b*e.c+t.d*e.d,h=t.e+t.a*e.e+t.c*e.f,a=t.f+t.b*e.e+t.d*e.f;return n.a=r,n.b=i,n.c=s,n.d=o,n.e=h,n.f=a,n}around(t,e,n){return this.clone().aroundO(t,e,n)}aroundO(t,e,n){const r=t||0,i=e||0;return this.translateO(-r,-i).lmultiplyO(n).translateO(r,i)}clone(){return new ft(this)}decompose(t=0,e=0){const n=this.a,r=this.b,i=this.c,s=this.d,o=this.e,h=this.f,a=n*s-r*i,u=a>0?1:-1,c=u*Math.sqrt(n*n+r*r),l=Math.atan2(u*r,u*n),f=180/Math.PI*l,p=Math.cos(l),d=Math.sin(l),m=(n*i+r*s)/a,_=i*c/(m*n-r)||s*c/(m*r+n);return{scaleX:c,scaleY:_,shear:m,rotate:f,translateX:o-t+t*p*c+e*(m*p*c-d*_),translateY:h-e+t*d*c+e*(m*d*c+p*_),originX:t,originY:e,a:this.a,b:this.b,c:this.c,d:this.d,e:this.e,f:this.f}}equals(t){if(t===this)return!0;const e=new ft(t);return lt(this.a,e.a)&&lt(this.b,e.b)&&lt(this.c,e.c)&&lt(this.d,e.d)&&lt(this.e,e.e)&&lt(this.f,e.f)}flip(t,e){return this.clone().flipO(t,e)}flipO(t,e){return"x"===t?this.scaleO(-1,1,e,0):"y"===t?this.scaleO(1,-1,0,e):this.scaleO(-1,-1,t,e||t)}init(t){const e=ft.fromArray([1,0,0,1,0,0]);return t=t instanceof Rt?t.matrixify():"string"==typeof t?ft.fromArray(t.split(rt).map(parseFloat)):Array.isArray(t)?ft.fromArray(t):"object"==typeof t&&ft.isMatrixLike(t)?t:"object"==typeof t?(new ft).transform(t):6===arguments.length?ft.fromArray([].slice.call(arguments)):e,this.a=null!=t.a?t.a:e.a,this.b=null!=t.b?t.b:e.b,this.c=null!=t.c?t.c:e.c,this.d=null!=t.d?t.d:e.d,this.e=null!=t.e?t.e:e.e,this.f=null!=t.f?t.f:e.f,this}inverse(){return this.clone().inverseO()}inverseO(){const t=this.a,e=this.b,n=this.c,r=this.d,i=this.e,s=this.f,o=t*r-e*n;if(!o)throw new Error("Cannot invert "+this);const h=r/o,a=-e/o,u=-n/o,c=t/o,l=-(h*i+u*s),f=-(a*i+c*s);return this.a=h,this.b=a,this.c=u,this.d=c,this.e=l,this.f=f,this}lmultiply(t){return this.clone().lmultiplyO(t)}lmultiplyO(t){const e=t instanceof ft?t:new ft(t);return ft.matrixMultiply(e,this,this)}multiply(t){return this.clone().multiplyO(t)}multiplyO(t){const e=t instanceof ft?t:new ft(t);return ft.matrixMultiply(this,e,this)}rotate(t,e,n){return this.clone().rotateO(t,e,n)}rotateO(t,e=0,n=0){t=c(t);const r=Math.cos(t),i=Math.sin(t),{a:s,b:o,c:h,d:a,e:u,f:l}=this;return this.a=s*r-o*i,this.b=o*r+s*i,this.c=h*r-a*i,this.d=a*r+h*i,this.e=u*r-l*i+n*i-e*r+e,this.f=l*r+u*i-e*i-n*r+n,this}scale(t,e,n,r){return this.clone().scaleO(...arguments)}scaleO(t,e=t,n=0,r=0){3===arguments.length&&(r=n,n=e,e=t);const{a:i,b:s,c:o,d:h,e:a,f:u}=this;return this.a=i*t,this.b=s*e,this.c=o*t,this.d=h*e,this.e=a*t-n*t+n,this.f=u*e-r*e+r,this}shear(t,e,n){return this.clone().shearO(t,e,n)}shearO(t,e=0,n=0){const{a:r,b:i,c:s,d:o,e:h,f:a}=this;return this.a=r+i*t,this.c=s+o*t,this.e=h+a*t-n*t,this}skew(t,e,n,r){return this.clone().skewO(...arguments)}skewO(t,e=t,n=0,r=0){3===arguments.length&&(r=n,n=e,e=t),t=c(t),e=c(e);const i=Math.tan(t),s=Math.tan(e),{a:o,b:h,c:a,d:u,e:l,f}=this;return this.a=o+h*i,this.b=h+o*s,this.c=a+u*i,this.d=u+a*s,this.e=l+f*i-r*i,this.f=f+l*s-n*s,this}skewX(t,e,n){return this.skew(t,0,e,n)}skewY(t,e,n){return this.skew(0,t,e,n)}toArray(){return[this.a,this.b,this.c,this.d,this.e,this.f]}toString(){return"matrix("+this.a+","+this.b+","+this.c+","+this.d+","+this.e+","+this.f+")"}transform(t){if(ft.isMatrixLike(t))return new ft(t).multiplyO(this);const e=ft.formatTransforms(t),{x:n,y:r}=new ct(e.ox,e.oy).transform(this),i=(new ft).translateO(e.rx,e.ry).lmultiplyO(this).translateO(-n,-r).scaleO(e.scaleX,e.scaleY).skewO(e.skewX,e.skewY).shearO(e.shear).rotateO(e.theta).translateO(n,r);if(isFinite(e.px)||isFinite(e.py)){const t=new ct(n,r).transform(i),s=isFinite(e.px)?e.px-t.x:0,o=isFinite(e.py)?e.py-t.y:0;i.translateO(s,o)}return i.translateO(e.tx,e.ty),i}translate(t,e){return this.clone().translateO(t,e)}translateO(t,e){return this.e+=t||0,this.f+=e||0,this}valueOf(){return{a:this.a,b:this.b,c:this.c,d:this.d,e:this.e,f:this.f}}}function pt(){if(!pt.nodes){const t=P().size(2,0);t.node.style.cssText=["opacity: 0","position: absolute","left: -100%","top: -100%","overflow: hidden"].join(";"),t.attr("focusable","false"),t.attr("aria-hidden","true");const e=t.path().node;pt.nodes={svg:t,path:e}}if(!pt.nodes.svg.node.parentNode){const t=O.document.body||O.document.documentElement;pt.nodes.svg.addTo(t)}return pt.nodes}function dt(t){return!(t.width||t.height||t.x||t.y)}D(ft,"Matrix");class mt{constructor(...t){this.init(...t)}addOffset(){return this.x+=O.window.pageXOffset,this.y+=O.window.pageYOffset,new mt(this)}init(t){return t="string"==typeof t?t.split(rt).map(parseFloat):Array.isArray(t)?t:"object"==typeof t?[null!=t.left?t.left:t.x,null!=t.top?t.top:t.y,t.width,t.height]:4===arguments.length?[].slice.call(arguments):[0,0,0,0],this.x=t[0]||0,this.y=t[1]||0,this.width=this.w=t[2]||0,this.height=this.h=t[3]||0,this.x2=this.x+this.w,this.y2=this.y+this.h,this.cx=this.x+this.w/2,this.cy=this.y+this.h/2,this}isNulled(){return dt(this)}merge(t){const e=Math.min(this.x,t.x),n=Math.min(this.y,t.y),r=Math.max(this.x+this.width,t.x+t.width)-e,i=Math.max(this.y+this.height,t.y+t.height)-n;return new mt(e,n,r,i)}toArray(){return[this.x,this.y,this.width,this.height]}toString(){return this.x+" "+this.y+" "+this.width+" "+this.height}transform(t){t instanceof ft||(t=new ft(t));let e=1/0,n=-1/0,r=1/0,i=-1/0;return[new ct(this.x,this.y),new ct(this.x2,this.y),new ct(this.x,this.y2),new ct(this.x2,this.y2)].forEach((function(s){s=s.transform(t),e=Math.min(e,s.x),n=Math.max(n,s.x),r=Math.min(r,s.y),i=Math.max(i,s.y)})),new mt(e,r,n-e,i-r)}}function _t(t,e,n){let r;try{if(r=e(t.node),dt(r)&&(i=t.node)!==O.document&&!(O.document.documentElement.contains||function(t){for(;t.parentNode;)t=t.parentNode;return t===O.document}).call(O.document.documentElement,i))throw new Error("Element not in the dom")}catch(e){r=n(t)}var i;return r}s({viewbox:{viewbox(t,e,n,r){return null==t?new mt(this.attr("viewBox")):this.attr("viewBox",new mt(t,e,n,r))},zoom(t,e){let{width:n,height:r}=this.attr(["width","height"]);if((n||r)&&"string"!=typeof n&&"string"!=typeof r||(n=this.node.clientWidth,r=this.node.clientHeight),!n||!r)throw new Error("Impossible to get absolute width and height. Please provide an absolute width and height attribute on the zooming element");const i=this.viewbox(),s=n/i.width,o=r/i.height,h=Math.min(s,o);if(null==t)return h;let a=h/t;a===1/0&&(a=Number.MAX_SAFE_INTEGER/100),e=e||new ct(n/2/s+i.x,r/2/o+i.y);const u=new mt(i).transform(new ft({scale:a,origin:e}));return this.viewbox(u)}}}),D(mt,"Box");class yt extends Array{constructor(t=[],...e){if(super(t,...e),"number"==typeof t)return this;this.length=0,this.push(...t)}}q([yt],{each(t,...e){return"function"==typeof t?this.map(((e,n,r)=>t.call(e,e,n,r))):this.map((n=>n[t](...e)))},toArray(){return Array.prototype.concat.apply([],this)}});const wt=["toArray","constructor","each"];function gt(t,e){return new yt(a((e||O.document).querySelectorAll(t),(function(t){return F(t)})))}yt.extend=function(t){t=t.reduce(((t,e)=>(wt.includes(e)||"_"===e[0]||(t[e]=function(...t){return this.each(e,...t)}),t)),{}),q([yt],t)};let vt=0;const bt={};function xt(t){let e=t.getEventHolder();return e===O.window&&(e=bt),e.events||(e.events={}),e.events}function Ot(t){return t.getEventTarget()}function St(t){let e=t.getEventHolder();e===O.window&&(e=bt),e.events&&(e.events={})}function Et(t,e,n,r,i){const s=n.bind(r||t),o=P(t),h=xt(o),a=Ot(o);e=Array.isArray(e)?e:e.split(rt),n._svgjsListenerId||(n._svgjsListenerId=++vt),e.forEach((function(t){const e=t.split(".")[0],r=t.split(".")[1]||"*";h[e]=h[e]||{},h[e][r]=h[e][r]||{},h[e][r][n._svgjsListenerId]=s,a.addEventListener(e,s,i||!1)}))}function Mt(t,e,n,r){const i=P(t),s=xt(i),o=Ot(i);("function"!=typeof n||(n=n._svgjsListenerId))&&(e=Array.isArray(e)?e:(e||"").split(rt)).forEach((function(t){const e=t&&t.split(".")[0],h=t&&t.split(".")[1];let a,u;if(n)s[e]&&s[e][h||"*"]&&(o.removeEventListener(e,s[e][h||"*"][n],r||!1),delete s[e][h||"*"][n]);else if(e&&h){if(s[e]&&s[e][h]){for(u in s[e][h])Mt(o,[e,h].join("."),u);delete s[e][h]}}else if(h)for(t in s)for(a in s[t])h===a&&Mt(o,[t,h].join("."));else if(e){if(s[e]){for(a in s[e])Mt(o,[e,a].join("."));delete s[e]}}else{for(t in s)Mt(o,t);St(i)}}))}function Ct(t,e,n,r){const i=Ot(t);return e instanceof O.window.Event||(e=new O.window.CustomEvent(e,{detail:n,cancelable:!0,...r})),i.dispatchEvent(e),e}class At extends L{addEventListener(){}dispatch(t,e,n){return Ct(this,t,e,n)}dispatchEvent(t){const e=this.getEventHolder().events;if(!e)return!0;const n=e[t.type];for(const e in n)for(const r in n[e])n[e][r](t);return!t.defaultPrevented}fire(t,e,n){return this.dispatch(t,e,n),this}getEventHolder(){return this}getEventTarget(){return this}off(t,e,n){return Mt(this,t,e,n),this}on(t,e,n,r){return Et(this,t,e,n,r),this}removeEventListener(){}}function Tt(){}D(At,"EventTarget");const Lt={duration:400,ease:">",delay:0},Nt={"fill-opacity":1,"stroke-opacity":1,"stroke-width":0,"stroke-linejoin":"miter","stroke-linecap":"butt",fill:"#000000",stroke:"#000000",opacity:1,x:0,y:0,cx:0,cy:0,width:0,height:0,r:0,rx:0,ry:0,offset:0,"stop-opacity":1,"stop-color":"#000000","text-anchor":"start"};var kt={__proto__:null,noop:Tt,timeline:Lt,attrs:Nt};class It extends Array{constructor(...t){super(...t),this.init(...t)}clone(){return new this.constructor(this)}init(t){return"number"==typeof t||(this.length=0,this.push(...this.parse(t))),this}parse(t=[]){return t instanceof Array?t:t.trim().split(rt).map(parseFloat)}toArray(){return Array.prototype.concat.apply([],this)}toSet(){return new Set(this)}toString(){return this.join(" ")}valueOf(){const t=[];return t.push(...this),t}}class Pt{constructor(...t){this.init(...t)}convert(t){return new Pt(this.value,t)}divide(t){return t=new Pt(t),new Pt(this/t,this.unit||t.unit)}init(t,e){return e=Array.isArray(t)?t[1]:e,t=Array.isArray(t)?t[0]:t,this.value=0,this.unit=e||"","number"==typeof t?this.value=isNaN(t)?0:isFinite(t)?t:t<0?-34e37:34e37:"string"==typeof t?(e=t.match(H))&&(this.value=parseFloat(e[1]),"%"===e[5]?this.value/=100:"s"===e[5]&&(this.value*=1e3),this.unit=e[5]):t instanceof Pt&&(this.value=t.valueOf(),this.unit=t.unit),this}minus(t){return t=new Pt(t),new Pt(this-t,this.unit||t.unit)}plus(t){return t=new Pt(t),new Pt(this+t,this.unit||t.unit)}times(t){return t=new Pt(t),new Pt(this*t,this.unit||t.unit)}toArray(){return[this.value,this.unit]}toJSON(){return this.toString()}toString(){return("%"===this.unit?~~(1e8*this.value)/1e6:"s"===this.unit?this.value/1e3:this.value)+this.unit}valueOf(){return this.value}}const jt=[];class Ft extends At{constructor(t,e){super(),this.node=t,this.type=t.nodeName,e&&t!==e&&this.attr(e)}add(t,e){return(t=P(t)).removeNamespace&&this.node instanceof O.window.SVGElement&&t.removeNamespace(),null==e?this.node.appendChild(t.node):t.node!==this.node.childNodes[e]&&this.node.insertBefore(t.node,this.node.childNodes[e]),this}addTo(t,e){return P(t).put(this,e)}children(){return new yt(a(this.node.children,(function(t){return F(t)})))}clear(){for(;this.node.hasChildNodes();)this.node.removeChild(this.node.lastChild);return this}clone(t=!0){return this.writeDataToDom(),new this.constructor(z(this.node.cloneNode(t)))}each(t,e){const n=this.children();let r,i;for(r=0,i=n.length;r<i;r++)t.apply(n[r],[r,n]),e&&n[r].each(t,e);return this}element(t,e){return this.put(new Ft(I(t),e))}first(){return F(this.node.firstChild)}get(t){return F(this.node.childNodes[t])}getEventHolder(){return this.node}getEventTarget(){return this.node}has(t){return this.index(t)>=0}html(t,e){return this.xml(t,e,w)}id(t){return void 0!==t||this.node.id||(this.node.id=X(this.type)),this.attr("id",t)}index(t){return[].slice.call(this.node.childNodes).indexOf(t.node)}last(){return F(this.node.lastChild)}matches(t){const e=this.node,n=e.matches||e.matchesSelector||e.msMatchesSelector||e.mozMatchesSelector||e.webkitMatchesSelector||e.oMatchesSelector||null;return n&&n.call(e,t)}parent(t){let e=this;if(!e.node.parentNode)return null;if(e=F(e.node.parentNode),!t)return e;do{if("string"==typeof t?e.matches(t):e instanceof t)return e}while(e=F(e.node.parentNode));return e}put(t,e){return t=P(t),this.add(t,e),t}putIn(t,e){return P(t).add(this,e)}remove(){return this.parent()&&this.parent().removeElement(this),this}removeElement(t){return this.node.removeChild(t.node),this}replace(t){return t=P(t),this.node.parentNode&&this.node.parentNode.replaceChild(t.node,this.node),t}round(t=2,e=null){const n=10**t,r=this.attr(e);for(const t in r)"number"==typeof r[t]&&(r[t]=Math.round(r[t]*n)/n);return this.attr(r),this}svg(t,e){return this.xml(t,e,y)}toString(){return this.id()}words(t){return this.node.textContent=t,this}wrap(t){const e=this.parent();if(!e)return this.addTo(t);const n=e.index(this);return e.put(t,n).put(this)}writeDataToDom(){return this.each((function(){this.writeDataToDom()})),this}xml(t,e,n){if("boolean"==typeof t&&(n=e,e=t,t=null),null==t||"function"==typeof t){e=null==e||e,this.writeDataToDom();let n=this;if(null!=t){if(n=F(n.node.cloneNode(!0)),e){const e=t(n);if(n=e||n,!1===e)return""}n.each((function(){const e=t(this),n=e||this;!1===e?this.remove():e&&this!==n&&this.replace(n)}),!0)}return e?n.node.outerHTML:n.node.innerHTML}e=null!=e&&e;const r=I("wrapper",n),i=O.document.createDocumentFragment();r.innerHTML=t;for(let t=r.children.length;t--;)i.appendChild(r.firstElementChild);const s=this.parent();return e?this.replace(i)&&s:this.add(i)}}q(Ft,{attr:function(t,e,n){if(null==t){t={},e=this.node.attributes;for(const n of e)t[n.nodeName]=et.test(n.nodeValue)?parseFloat(n.nodeValue):n.nodeValue;return t}if(t instanceof Array)return t.reduce(((t,e)=>(t[e]=this.attr(e),t)),{});if("object"==typeof t&&t.constructor===Object)for(e in t)this.attr(e,t[e]);else if(null===e)this.node.removeAttribute(t);else{if(null==e)return null==(e=this.node.getAttribute(t))?Nt[t]:et.test(e)?parseFloat(e):e;"number"==typeof(e=jt.reduce(((e,n)=>n(t,e,this)),e))?e=new Pt(e):ut.isColor(e)?e=new ut(e):e.constructor===Array&&(e=new It(e)),"leading"===t?this.leading&&this.leading(e):"string"==typeof n?this.node.setAttributeNS(n,t,e.toString()):this.node.setAttribute(t,e.toString()),!this.rebuild||"font-size"!==t&&"x"!==t||this.rebuild()}return this},find:function(t){return gt(t,this.node)},findOne:function(t){return F(this.node.querySelector(t))}}),D(Ft,"Dom");class Rt extends Ft{constructor(t,e){super(t,e),this.dom={},this.node.instance=this,t.hasAttribute("svgjs:data")&&this.setData(JSON.parse(t.getAttribute("svgjs:data"))||{})}center(t,e){return this.cx(t).cy(e)}cx(t){return null==t?this.x()+this.width()/2:this.x(t-this.width()/2)}cy(t){return null==t?this.y()+this.height()/2:this.y(t-this.height()/2)}defs(){const t=this.root();return t&&t.defs()}dmove(t,e){return this.dx(t).dy(e)}dx(t=0){return this.x(new Pt(t).plus(this.x()))}dy(t=0){return this.y(new Pt(t).plus(this.y()))}getEventHolder(){return this}height(t){return this.attr("height",t)}move(t,e){return this.x(t).y(e)}parents(t=this.root()){const e="string"==typeof t;e||(t=P(t));const n=new yt;let r=this;for(;(r=r.parent())&&r.node!==O.document&&"#document-fragment"!==r.nodeName&&(n.push(r),e||r.node!==t.node)&&(!e||!r.matches(t));)if(r.node===this.root().node)return null;return n}reference(t){if(!(t=this.attr(t)))return null;const e=(t+"").match(Z);return e?P(e[1]):null}root(){const t=this.parent(V(k));return t&&t.root()}setData(t){return this.dom=t,this}size(t,e){const n=d(this,t,e);return this.width(new Pt(n.width)).height(new Pt(n.height))}width(t){return this.attr("width",t)}writeDataToDom(){return this.node.removeAttribute("svgjs:data"),Object.keys(this.dom).length&&this.node.setAttribute("svgjs:data",JSON.stringify(this.dom)),super.writeDataToDom()}x(t){return this.attr("x",t)}y(t){return this.attr("y",t)}}q(Rt,{bbox:function(){const t=_t(this,(t=>t.getBBox()),(t=>{try{const e=t.clone().addTo(pt().svg).show(),n=e.node.getBBox();return e.remove(),n}catch(e){throw new Error(`Getting bbox of element "${t.node.nodeName}" is not possible: ${e.toString()}`)}}));return new mt(t)},rbox:function(t){const e=_t(this,(t=>t.getBoundingClientRect()),(t=>{throw new Error(`Getting rbox of element "${t.node.nodeName}" is not possible`)})),n=new mt(e);return t?n.transform(t.screenCTM().inverseO()):n.addOffset()},inside:function(t,e){const n=this.bbox();return t>n.x&&e>n.y&&t<n.x+n.width&&e<n.y+n.height},point:function(t,e){return new ct(t,e).transform(this.screenCTM().inverse())},ctm:function(){return new ft(this.node.getCTM())},screenCTM:function(){if("function"==typeof this.isRoot&&!this.isRoot()){const t=this.rect(1,1),e=t.node.getScreenCTM();return t.remove(),new ft(e)}return new ft(this.node.getScreenCTM())}}),D(Rt,"Element");const Gt={stroke:["color","width","opacity","linecap","linejoin","miterlimit","dasharray","dashoffset"],fill:["color","opacity","rule"],prefix:function(t,e){return"color"===e?t:t+"-"+e}};["fill","stroke"].forEach((function(t){const e={};let n;e[t]=function(e){if(void 0===e)return this.attr(t);if("string"==typeof e||e instanceof ut||ut.isRgb(e)||e instanceof Rt)this.attr(t,e);else for(n=Gt[t].length-1;n>=0;n--)null!=e[Gt[t][n]]&&this.attr(Gt.prefix(t,Gt[t][n]),e[Gt[t][n]]);return this},s(["Element","Runner"],e)})),s(["Element","Runner"],{matrix:function(t,e,n,r,i,s){return null==t?new ft(this):this.attr("transform",new ft(t,e,n,r,i,s))},rotate:function(t,e,n){return this.transform({rotate:t,ox:e,oy:n},!0)},skew:function(t,e,n,r){return 1===arguments.length||3===arguments.length?this.transform({skew:t,ox:e,oy:n},!0):this.transform({skew:[t,e],ox:n,oy:r},!0)},shear:function(t,e,n){return this.transform({shear:t,ox:e,oy:n},!0)},scale:function(t,e,n,r){return 1===arguments.length||3===arguments.length?this.transform({scale:t,ox:e,oy:n},!0):this.transform({scale:[t,e],ox:n,oy:r},!0)},translate:function(t,e){return this.transform({translate:[t,e]},!0)},relative:function(t,e){return this.transform({relative:[t,e]},!0)},flip:function(t="both",e="center"){return-1==="xybothtrue".indexOf(t)&&(e=t,t="both"),this.transform({flip:t,origin:e},!0)},opacity:function(t){return this.attr("opacity",t)}}),s("radius",{radius:function(t,e=t){return"radialGradient"===(this._element||this).type?this.attr("r",new Pt(t)):this.rx(t).ry(e)}}),s("Path",{length:function(){return this.node.getTotalLength()},pointAt:function(t){return new ct(this.node.getPointAtLength(t))}}),s(["Element","Runner"],{font:function(t,e){if("object"==typeof t){for(e in t)this.font(e,t[e]);return this}return"leading"===t?this.leading(e):"anchor"===t?this.attr("text-anchor",e):"size"===t||"family"===t||"weight"===t||"stretch"===t||"variant"===t||"style"===t?this.attr("font-"+t,e):this.attr(t,e)}}),s("Element",["click","dblclick","mousedown","mouseup","mouseover","mouseout","mousemove","mouseenter","mouseleave","touchstart","touchmove","touchleave","touchend","touchcancel"].reduce((function(t,e){return t[e]=function(t){return null===t?this.off(e):this.on(e,t),this},t}),{})),s("Element",{untransform:function(){return this.attr("transform",null)},matrixify:function(){return(this.attr("transform")||"").split($).slice(0,-1).map((function(t){const e=t.trim().split("(");return[e[0],e[1].split(rt).map((function(t){return parseFloat(t)}))]})).reverse().reduce((function(t,e){return"matrix"===e[0]?t.lmultiply(ft.fromArray(e[1])):t[e[0]].apply(t,e[1])}),new ft)},toParent:function(t,e){if(this===t)return this;const n=this.screenCTM(),r=t.screenCTM().inverse();return this.addTo(t,e).untransform().transform(r.multiply(n)),this},toRoot:function(t){return this.toParent(this.root(),t)},transform:function(t,e){if(null==t||"string"==typeof t){const e=new ft(this).decompose();return null==t?e:e[t]}ft.isMatrixLike(t)||(t={...t,origin:m(t,this)});const n=new ft(!0===e?this:e||!1).transform(t);return this.attr("transform",n)}});class Dt extends Rt{flatten(t=this,e){return this.each((function(){if(this instanceof Dt)return this.flatten().ungroup()})),this}ungroup(t=this.parent(),e=t.index(this)){return e=-1===e?t.children().length:e,this.each((function(n,r){return r[r.length-n-1].toParent(t,e)})),this.remove()}}D(Dt,"Container");class Vt extends Dt{constructor(t,e=t){super(j("defs",t),e)}flatten(){return this}ungroup(){return this}}D(Vt,"Defs");class Yt extends Rt{}function Xt(t){return this.attr("rx",t)}function zt(t){return this.attr("ry",t)}function qt(t){return null==t?this.cx()-this.rx():this.cx(t+this.rx())}function Bt(t){return null==t?this.cy()-this.ry():this.cy(t+this.ry())}function Ht(t){return this.attr("cx",t)}function Ut(t){return this.attr("cy",t)}function Wt(t){return null==t?2*this.rx():this.rx(new Pt(t).divide(2))}function Zt(t){return null==t?2*this.ry():this.ry(new Pt(t).divide(2))}D(Yt,"Shape");var $t={__proto__:null,rx:Xt,ry:zt,x:qt,y:Bt,cx:Ht,cy:Ut,width:Wt,height:Zt};class Kt extends Yt{constructor(t,e=t){super(j("ellipse",t),e)}size(t,e){const n=d(this,t,e);return this.rx(new Pt(n.width).divide(2)).ry(new Pt(n.height).divide(2))}}q(Kt,$t),s("Container",{ellipse:B((function(t=0,e=t){return this.put(new Kt).size(t,e).move(0,0)}))}),D(Kt,"Ellipse");class Qt extends Ft{constructor(t=O.document.createDocumentFragment()){super(t)}xml(t,e,n){if("boolean"==typeof t&&(n=e,e=t,t=null),null==t||"function"==typeof t){const t=new Ft(I("wrapper",n));return t.add(this.node.cloneNode(!0)),t.xml(!1,n)}return super.xml(t,!1,n)}}function Jt(t,e){return"radialGradient"===(this._element||this).type?this.attr({fx:new Pt(t),fy:new Pt(e)}):this.attr({x1:new Pt(t),y1:new Pt(e)})}function te(t,e){return"radialGradient"===(this._element||this).type?this.attr({cx:new Pt(t),cy:new Pt(e)}):this.attr({x2:new Pt(t),y2:new Pt(e)})}D(Qt,"Fragment");var ee,ne={__proto__:null,from:Jt,to:te};class re extends Dt{constructor(t,e){super(j(t+"Gradient","string"==typeof t?null:t),e)}attr(t,e,n){return"transform"===t&&(t="gradientTransform"),super.attr(t,e,n)}bbox(){return new mt}targets(){return gt('svg [fill*="'+this.id()+'"]')}toString(){return this.url()}update(t){return this.clear(),"function"==typeof t&&t.call(this,this),this}url(){return'url("#'+this.id()+'")'}}q(re,ne),s({Container:{gradient(...t){return this.defs().gradient(...t)}},Defs:{gradient:B((function(t,e){return this.put(new re(t)).update(e)}))}}),D(re,"Gradient");class ie extends Dt{constructor(t,e=t){super(j("pattern",t),e)}attr(t,e,n){return"transform"===t&&(t="patternTransform"),super.attr(t,e,n)}bbox(){return new mt}targets(){return gt('svg [fill*="'+this.id()+'"]')}toString(){return this.url()}update(t){return this.clear(),"function"==typeof t&&t.call(this,this),this}url(){return'url("#'+this.id()+'")'}}s({Container:{pattern(...t){return this.defs().pattern(...t)}},Defs:{pattern:B((function(t,e,n){return this.put(new ie).update(n).attr({x:0,y:0,width:t,height:e,patternUnits:"userSpaceOnUse"})}))}}),D(ie,"Pattern");class se extends Yt{constructor(t,e=t){super(j("image",t),e)}load(t,e){if(!t)return this;const n=new O.window.Image;return Et(n,"load",(function(t){const r=this.parent(ie);0===this.width()&&0===this.height()&&this.size(n.width,n.height),r instanceof ie&&0===r.width()&&0===r.height()&&r.size(this.width(),this.height()),"function"==typeof e&&e.call(this,t)}),this),Et(n,"load error",(function(){Mt(n)})),this.attr("href",n.src=t,v)}}ee=function(t,e,n){return"fill"!==t&&"stroke"!==t||nt.test(e)&&(e=n.root().defs().image(e)),e instanceof se&&(e=n.root().defs().pattern(0,0,(t=>{t.add(e)}))),e},jt.push(ee),s({Container:{image:B((function(t,e){return this.put(new se).size(0,0).load(t,e)}))}}),D(se,"Image");class oe extends It{bbox(){let t=-1/0,e=-1/0,n=1/0,r=1/0;return this.forEach((function(i){t=Math.max(i[0],t),e=Math.max(i[1],e),n=Math.min(i[0],n),r=Math.min(i[1],r)})),new mt(n,r,t-n,e-r)}move(t,e){const n=this.bbox();if(t-=n.x,e-=n.y,!isNaN(t)&&!isNaN(e))for(let n=this.length-1;n>=0;n--)this[n]=[this[n][0]+t,this[n][1]+e];return this}parse(t=[0,0]){const e=[];(t=t instanceof Array?Array.prototype.concat.apply([],t):t.trim().split(rt).map(parseFloat)).length%2!=0&&t.pop();for(let n=0,r=t.length;n<r;n+=2)e.push([t[n],t[n+1]]);return e}size(t,e){let n;const r=this.bbox();for(n=this.length-1;n>=0;n--)r.width&&(this[n][0]=(this[n][0]-r.x)*t/r.width+r.x),r.height&&(this[n][1]=(this[n][1]-r.y)*e/r.height+r.y);return this}toLine(){return{x1:this[0][0],y1:this[0][1],x2:this[1][0],y2:this[1][1]}}toString(){const t=[];for(let e=0,n=this.length;e<n;e++)t.push(this[e].join(","));return t.join(" ")}transform(t){return this.clone().transformO(t)}transformO(t){ft.isMatrixLike(t)||(t=new ft(t));for(let e=this.length;e--;){const[n,r]=this[e];this[e][0]=t.a*n+t.c*r+t.e,this[e][1]=t.b*n+t.d*r+t.f}return this}}var he={__proto__:null,MorphArray:oe,x:function(t){return null==t?this.bbox().x:this.move(t,this.bbox().y)},y:function(t){return null==t?this.bbox().y:this.move(this.bbox().x,t)},width:function(t){const e=this.bbox();return null==t?e.width:this.size(t,e.height)},height:function(t){const e=this.bbox();return null==t?e.height:this.size(e.width,t)}};class ae extends Yt{constructor(t,e=t){super(j("line",t),e)}array(){return new oe([[this.attr("x1"),this.attr("y1")],[this.attr("x2"),this.attr("y2")]])}move(t,e){return this.attr(this.array().move(t,e).toLine())}plot(t,e,n,r){return null==t?this.array():(t=void 0!==e?{x1:t,y1:e,x2:n,y2:r}:new oe(t).toLine(),this.attr(t))}size(t,e){const n=d(this,t,e);return this.attr(this.array().size(n.width,n.height).toLine())}}q(ae,he),s({Container:{line:B((function(...t){return ae.prototype.plot.apply(this.put(new ae),null!=t[0]?t:[0,0,0,0])}))}}),D(ae,"Line");class ue extends Dt{constructor(t,e=t){super(j("marker",t),e)}height(t){return this.attr("markerHeight",t)}orient(t){return this.attr("orient",t)}ref(t,e){return this.attr("refX",t).attr("refY",e)}toString(){return"url(#"+this.id()+")"}update(t){return this.clear(),"function"==typeof t&&t.call(this,this),this}width(t){return this.attr("markerWidth",t)}}function ce(t,e){return function(n){return null==n?this[t]:(this[t]=n,e&&e.call(this),this)}}s({Container:{marker(...t){return this.defs().marker(...t)}},Defs:{marker:B((function(t,e,n){return this.put(new ue).size(t,e).ref(t/2,e/2).viewbox(0,0,t,e).attr("orient","auto").update(n)}))},marker:{marker(t,e,n,r){let i=["marker"];return"all"!==t&&i.push(t),i=i.join("-"),t=arguments[1]instanceof ue?arguments[1]:this.defs().marker(e,n,r),this.attr(i,t)}}}),D(ue,"Marker");const le={"-":function(t){return t},"<>":function(t){return-Math.cos(t*Math.PI)/2+.5},">":function(t){return Math.sin(t*Math.PI/2)},"<":function(t){return 1-Math.cos(t*Math.PI/2)},bezier:function(t,e,n,r){return function(i){return i<0?t>0?e/t*i:n>0?r/n*i:0:i>1?n<1?(1-r)/(1-n)*i+(r-n)/(1-n):t<1?(1-e)/(1-t)*i+(e-t)/(1-t):1:3*i*(1-i)**2*e+3*i**2*(1-i)*r+i**3}},steps:function(t,e="end"){e=e.split("-").reverse()[0];let n=t;return"none"===e?--n:"both"===e&&++n,(r,i=!1)=>{let s=Math.floor(r*t);const o=r*s%1==0;return"start"!==e&&"both"!==e||++s,i&&o&&--s,r>=0&&s<0&&(s=0),r<=1&&s>n&&(s=n),s/n}}};class fe{done(){return!1}}class pe extends fe{constructor(t=Lt.ease){super(),this.ease=le[t]||t}step(t,e,n){return"number"!=typeof t?n<1?t:e:t+(e-t)*this.ease(n)}}class de extends fe{constructor(t){super(),this.stepper=t}done(t){return t.done}step(t,e,n,r){return this.stepper(t,e,n,r)}}function me(){const t=(this._duration||500)/1e3,e=this._overshoot||0,n=Math.PI,r=Math.log(e/100+1e-10),i=-r/Math.sqrt(n*n+r*r),s=3.9/(i*t);this.d=2*i*s,this.k=s*s}class _e extends de{constructor(t=500,e=0){super(),this.duration(t).overshoot(e)}step(t,e,n,r){if("string"==typeof t)return t;if(r.done=n===1/0,n===1/0)return e;if(0===n)return t;n>100&&(n=16),n/=1e3;const i=r.velocity||0,s=-this.d*i-this.k*(t-e),o=t+i*n+s*n*n/2;return r.velocity=i+s*n,r.done=Math.abs(e-o)+Math.abs(i)<.002,r.done?e:o}}q(_e,{duration:ce("_duration",me),overshoot:ce("_overshoot",me)});class ye extends de{constructor(t=.1,e=.01,n=0,r=1e3){super(),this.p(t).i(e).d(n).windup(r)}step(t,e,n,r){if("string"==typeof t)return t;if(r.done=n===1/0,n===1/0)return e;if(0===n)return t;const i=e-t;let s=(r.integral||0)+i*n;const o=(i-(r.error||0))/n,h=this._windup;return!1!==h&&(s=Math.max(-h,Math.min(s,h))),r.error=i,r.integral=s,r.done=Math.abs(i)<.001,r.done?e:t+(this.P*i+this.I*s+this.D*o)}}q(ye,{windup:ce("_windup"),p:ce("P"),i:ce("I"),d:ce("D")});const we={M:2,L:2,H:1,V:1,C:6,S:4,Q:4,T:2,A:7,Z:0},ge={M:function(t,e,n){return e.x=n.x=t[0],e.y=n.y=t[1],["M",e.x,e.y]},L:function(t,e){return e.x=t[0],e.y=t[1],["L",t[0],t[1]]},H:function(t,e){return e.x=t[0],["H",t[0]]},V:function(t,e){return e.y=t[0],["V",t[0]]},C:function(t,e){return e.x=t[4],e.y=t[5],["C",t[0],t[1],t[2],t[3],t[4],t[5]]},S:function(t,e){return e.x=t[2],e.y=t[3],["S",t[0],t[1],t[2],t[3]]},Q:function(t,e){return e.x=t[2],e.y=t[3],["Q",t[0],t[1],t[2],t[3]]},T:function(t,e){return e.x=t[0],e.y=t[1],["T",t[0],t[1]]},Z:function(t,e,n){return e.x=n.x,e.y=n.y,["Z"]},A:function(t,e){return e.x=t[5],e.y=t[6],["A",t[0],t[1],t[2],t[3],t[4],t[5],t[6]]}},ve="mlhvqtcsaz".split("");for(let t=0,e=ve.length;t<e;++t)ge[ve[t]]=function(t){return function(e,n,r){if("H"===t)e[0]=e[0]+n.x;else if("V"===t)e[0]=e[0]+n.y;else if("A"===t)e[5]=e[5]+n.x,e[6]=e[6]+n.y;else for(let t=0,r=e.length;t<r;++t)e[t]=e[t]+(t%2?n.y:n.x);return ge[t](e,n,r)}}(ve[t].toUpperCase());function be(t){return t.segment.length&&t.segment.length-1===we[t.segment[0].toUpperCase()]}function xe(t,e){t.inNumber&&Oe(t,!1);const n=it.test(e);if(n)t.segment=[e];else{const e=t.lastCommand,n=e.toLowerCase(),r=e===n;t.segment=["m"===n?r?"l":"L":e]}return t.inSegment=!0,t.lastCommand=t.segment[0],n}function Oe(t,e){if(!t.inNumber)throw new Error("Parser Error");t.number&&t.segment.push(parseFloat(t.number)),t.inNumber=e,t.number="",t.pointSeen=!1,t.hasExponent=!1,be(t)&&Se(t)}function Se(t){t.inSegment=!1,t.absolute&&(t.segment=function(t){const e=t.segment[0];return ge[e](t.segment.slice(1),t.p,t.p0)}(t)),t.segments.push(t.segment)}function Ee(t){if(!t.segment.length)return!1;const e="A"===t.segment[0].toUpperCase(),n=t.segment.length;return e&&(4===n||5===n)}function Me(t){return"E"===t.lastToken.toUpperCase()}class Ce extends It{bbox(){return pt().path.setAttribute("d",this.toString()),new mt(pt.nodes.path.getBBox())}move(t,e){const n=this.bbox();if(t-=n.x,e-=n.y,!isNaN(t)&&!isNaN(e))for(let n,r=this.length-1;r>=0;r--)n=this[r][0],"M"===n||"L"===n||"T"===n?(this[r][1]+=t,this[r][2]+=e):"H"===n?this[r][1]+=t:"V"===n?this[r][1]+=e:"C"===n||"S"===n||"Q"===n?(this[r][1]+=t,this[r][2]+=e,this[r][3]+=t,this[r][4]+=e,"C"===n&&(this[r][5]+=t,this[r][6]+=e)):"A"===n&&(this[r][6]+=t,this[r][7]+=e);return this}parse(t="M0 0"){return Array.isArray(t)&&(t=Array.prototype.concat.apply([],t).toString()),function(t,e=!0){let n=0,r="";const i={segment:[],inNumber:!1,number:"",lastToken:"",inSegment:!1,segments:[],pointSeen:!1,hasExponent:!1,absolute:e,p0:new ct,p:new ct};for(;i.lastToken=r,r=t.charAt(n++);)if(i.inSegment||!xe(i,r))if("."!==r)if(isNaN(parseInt(r)))if(" "!==r&&","!==r)if("-"!==r)if("E"!==r.toUpperCase()){if(it.test(r)){if(i.inNumber)Oe(i,!1);else{if(!be(i))throw new Error("parser Error");Se(i)}--n}}else i.number+=r,i.hasExponent=!0;else{if(i.inNumber&&!Me(i)){Oe(i,!1),--n;continue}i.number+=r,i.inNumber=!0}else i.inNumber&&Oe(i,!1);else{if("0"===i.number||Ee(i)){i.inNumber=!0,i.number=r,Oe(i,!0);continue}i.inNumber=!0,i.number+=r}else{if(i.pointSeen||i.hasExponent){Oe(i,!1),--n;continue}i.inNumber=!0,i.pointSeen=!0,i.number+=r}return i.inNumber&&Oe(i,!1),i.inSegment&&be(i)&&Se(i),i.segments}(t)}size(t,e){const n=this.bbox();let r,i;for(n.width=0===n.width?1:n.width,n.height=0===n.height?1:n.height,r=this.length-1;r>=0;r--)i=this[r][0],"M"===i||"L"===i||"T"===i?(this[r][1]=(this[r][1]-n.x)*t/n.width+n.x,this[r][2]=(this[r][2]-n.y)*e/n.height+n.y):"H"===i?this[r][1]=(this[r][1]-n.x)*t/n.width+n.x:"V"===i?this[r][1]=(this[r][1]-n.y)*e/n.height+n.y:"C"===i||"S"===i||"Q"===i?(this[r][1]=(this[r][1]-n.x)*t/n.width+n.x,this[r][2]=(this[r][2]-n.y)*e/n.height+n.y,this[r][3]=(this[r][3]-n.x)*t/n.width+n.x,this[r][4]=(this[r][4]-n.y)*e/n.height+n.y,"C"===i&&(this[r][5]=(this[r][5]-n.x)*t/n.width+n.x,this[r][6]=(this[r][6]-n.y)*e/n.height+n.y)):"A"===i&&(this[r][1]=this[r][1]*t/n.width,this[r][2]=this[r][2]*e/n.height,this[r][6]=(this[r][6]-n.x)*t/n.width+n.x,this[r][7]=(this[r][7]-n.y)*e/n.height+n.y);return this}toString(){return function(t){let e="";for(let n=0,r=t.length;n<r;n++)e+=t[n][0],null!=t[n][1]&&(e+=t[n][1],null!=t[n][2]&&(e+=" ",e+=t[n][2],null!=t[n][3]&&(e+=" ",e+=t[n][3],e+=" ",e+=t[n][4],null!=t[n][5]&&(e+=" ",e+=t[n][5],e+=" ",e+=t[n][6],null!=t[n][7]&&(e+=" ",e+=t[n][7])))));return e+" "}(this)}}const Ae=t=>{const e=typeof t;return"number"===e?Pt:"string"===e?ut.isColor(t)?ut:rt.test(t)?it.test(t)?Ce:It:H.test(t)?Pt:Le:Pe.indexOf(t.constructor)>-1?t.constructor:Array.isArray(t)?It:"object"===e?Ie:Le};class Te{constructor(t){this._stepper=t||new pe("-"),this._from=null,this._to=null,this._type=null,this._context=null,this._morphObj=null}at(t){return this._morphObj.morph(this._from,this._to,t,this._stepper,this._context)}done(){return this._context.map(this._stepper.done).reduce((function(t,e){return t&&e}),!0)}from(t){return null==t?this._from:(this._from=this._set(t),this)}stepper(t){return null==t?this._stepper:(this._stepper=t,this)}to(t){return null==t?this._to:(this._to=this._set(t),this)}type(t){return null==t?this._type:(this._type=t,this)}_set(t){this._type||this.type(Ae(t));let e=new this._type(t);return this._type===ut&&(e=this._to?e[this._to[4]]():this._from?e[this._from[4]]():e),this._type===Ie&&(e=this._to?e.align(this._to):this._from?e.align(this._from):e),e=e.toConsumable(),this._morphObj=this._morphObj||new this._type,this._context=this._context||Array.apply(null,Array(e.length)).map(Object).map((function(t){return t.done=!0,t})),e}}class Le{constructor(...t){this.init(...t)}init(t){return t=Array.isArray(t)?t[0]:t,this.value=t,this}toArray(){return[this.value]}valueOf(){return this.value}}class Ne{constructor(...t){this.init(...t)}init(t){return Array.isArray(t)&&(t={scaleX:t[0],scaleY:t[1],shear:t[2],rotate:t[3],translateX:t[4],translateY:t[5],originX:t[6],originY:t[7]}),Object.assign(this,Ne.defaults,t),this}toArray(){const t=this;return[t.scaleX,t.scaleY,t.shear,t.rotate,t.translateX,t.translateY,t.originX,t.originY]}}Ne.defaults={scaleX:1,scaleY:1,shear:0,rotate:0,translateX:0,translateY:0,originX:0,originY:0};const ke=(t,e)=>t[0]<e[0]?-1:t[0]>e[0]?1:0;class Ie{constructor(...t){this.init(...t)}align(t){const e=this.values;for(let n=0,r=e.length;n<r;++n){if(e[n+1]===t[n+1]){if(e[n+1]===ut&&t[n+7]!==e[n+7]){const e=t[n+7],r=new ut(this.values.splice(n+3,5))[e]().toArray();this.values.splice(n+3,0,...r)}n+=e[n+2]+2;continue}if(!t[n+1])return this;const r=(new t[n+1]).toArray(),i=e[n+2]+3;e.splice(n,i,t[n],t[n+1],t[n+2],...r),n+=e[n+2]+2}return this}init(t){if(this.values=[],Array.isArray(t))return void(this.values=t.slice());t=t||{};const e=[];for(const n in t){const r=Ae(t[n]),i=new r(t[n]).toArray();e.push([n,r,i.length,...i])}return e.sort(ke),this.values=e.reduce(((t,e)=>t.concat(e)),[]),this}toArray(){return this.values}valueOf(){const t={},e=this.values;for(;e.length;){const n=e.shift(),r=e.shift(),i=e.shift(),s=e.splice(0,i);t[n]=new r(s)}return t}}const Pe=[Le,Ne,Ie];function je(t=[]){Pe.push(...[].concat(t))}function Fe(){q(Pe,{to(t){return(new Te).type(this.constructor).from(this.toArray()).to(t)},fromArray(t){return this.init(t),this},toConsumable(){return this.toArray()},morph(t,e,n,r,i){return this.fromArray(t.map((function(t,s){return r.step(t,e[s],n,i[s],i)})))}})}class Re extends Yt{constructor(t,e=t){super(j("path",t),e)}array(){return this._array||(this._array=new Ce(this.attr("d")))}clear(){return delete this._array,this}height(t){return null==t?this.bbox().height:this.size(this.bbox().width,t)}move(t,e){return this.attr("d",this.array().move(t,e))}plot(t){return null==t?this.array():this.clear().attr("d","string"==typeof t?t:this._array=new Ce(t))}size(t,e){const n=d(this,t,e);return this.attr("d",this.array().size(n.width,n.height))}width(t){return null==t?this.bbox().width:this.size(t,this.bbox().height)}x(t){return null==t?this.bbox().x:this.move(t,this.bbox().y)}y(t){return null==t?this.bbox().y:this.move(this.bbox().x,t)}}Re.prototype.MorphArray=Ce,s({Container:{path:B((function(t){return this.put(new Re).plot(t||new Ce)}))}}),D(Re,"Path");var Ge={__proto__:null,array:function(){return this._array||(this._array=new oe(this.attr("points")))},clear:function(){return delete this._array,this},move:function(t,e){return this.attr("points",this.array().move(t,e))},plot:function(t){return null==t?this.array():this.clear().attr("points","string"==typeof t?t:this._array=new oe(t))},size:function(t,e){const n=d(this,t,e);return this.attr("points",this.array().size(n.width,n.height))}};class De extends Yt{constructor(t,e=t){super(j("polygon",t),e)}}s({Container:{polygon:B((function(t){return this.put(new De).plot(t||new oe)}))}}),q(De,he),q(De,Ge),D(De,"Polygon");class Ve extends Yt{constructor(t,e=t){super(j("polyline",t),e)}}s({Container:{polyline:B((function(t){return this.put(new Ve).plot(t||new oe)}))}}),q(Ve,he),q(Ve,Ge),D(Ve,"Polyline");class Ye extends Yt{constructor(t,e=t){super(j("rect",t),e)}}q(Ye,{rx:Xt,ry:zt}),s({Container:{rect:B((function(t,e){return this.put(new Ye).size(t,e)}))}}),D(Ye,"Rect");class Xe{constructor(){this._first=null,this._last=null}first(){return this._first&&this._first.value}last(){return this._last&&this._last.value}push(t){const e=void 0!==t.next?t:{value:t,next:null,prev:null};return this._last?(e.prev=this._last,this._last.next=e,this._last=e):(this._last=e,this._first=e),e}remove(t){t.prev&&(t.prev.next=t.next),t.next&&(t.next.prev=t.prev),t===this._last&&(this._last=t.prev),t===this._first&&(this._first=t.next),t.prev=null,t.next=null}shift(){const t=this._first;return t?(this._first=t.next,this._first&&(this._first.prev=null),this._last=this._first?this._last:null,t.value):null}}const ze={nextDraw:null,frames:new Xe,timeouts:new Xe,immediates:new Xe,timer:()=>O.window.performance||O.window.Date,transforms:[],frame(t){const e=ze.frames.push({run:t});return null===ze.nextDraw&&(ze.nextDraw=O.window.requestAnimationFrame(ze._draw)),e},timeout(t,e){e=e||0;const n=ze.timer().now()+e,r=ze.timeouts.push({run:t,time:n});return null===ze.nextDraw&&(ze.nextDraw=O.window.requestAnimationFrame(ze._draw)),r},immediate(t){const e=ze.immediates.push(t);return null===ze.nextDraw&&(ze.nextDraw=O.window.requestAnimationFrame(ze._draw)),e},cancelFrame(t){null!=t&&ze.frames.remove(t)},clearTimeout(t){null!=t&&ze.timeouts.remove(t)},cancelImmediate(t){null!=t&&ze.immediates.remove(t)},_draw(t){let e=null;const n=ze.timeouts.last();for(;(e=ze.timeouts.shift())&&(t>=e.time?e.run():ze.timeouts.push(e),e!==n););let r=null;const i=ze.frames.last();for(;r!==i&&(r=ze.frames.shift());)r.run(t);let s=null;for(;s=ze.immediates.shift();)s();ze.nextDraw=ze.timeouts.first()||ze.frames.first()?O.window.requestAnimationFrame(ze._draw):null}},qe=function(t){const e=t.start,n=t.runner.duration();return{start:e,duration:n,end:e+n,runner:t.runner}},Be=function(){const t=O.window;return(t.performance||t.Date).now()};class He extends At{constructor(t=Be){super(),this._timeSource=t,this._startTime=0,this._speed=1,this._persist=0,this._nextFrame=null,this._paused=!0,this._runners=[],this._runnerIds=[],this._lastRunnerId=-1,this._time=0,this._lastSourceTime=0,this._lastStepTime=0,this._step=this._stepFn.bind(this,!1),this._stepImmediate=this._stepFn.bind(this,!0)}active(){return!!this._nextFrame}finish(){return this.time(this.getEndTimeOfTimeline()+1),this.pause()}getEndTime(){const t=this.getLastRunnerInfo(),e=t?t.runner.duration():0;return(t?t.start:this._time)+e}getEndTimeOfTimeline(){const t=this._runners.map((t=>t.start+t.runner.duration()));return Math.max(0,...t)}getLastRunnerInfo(){return this.getRunnerInfoById(this._lastRunnerId)}getRunnerInfoById(t){return this._runners[this._runnerIds.indexOf(t)]||null}pause(){return this._paused=!0,this._continue()}persist(t){return null==t?this._persist:(this._persist=t,this)}play(){return this._paused=!1,this.updateTime()._continue()}reverse(t){const e=this.speed();if(null==t)return this.speed(-e);const n=Math.abs(e);return this.speed(t?-n:n)}schedule(t,e,n){if(null==t)return this._runners.map(qe);let r=0;const i=this.getEndTime();if(e=e||0,null==n||"last"===n||"after"===n)r=i;else if("absolute"===n||"start"===n)r=e,e=0;else if("now"===n)r=this._time;else if("relative"===n){const n=this.getRunnerInfoById(t.id);n&&(r=n.start+e,e=0)}else{if("with-last"!==n)throw new Error('Invalid value for the "when" parameter');{const t=this.getLastRunnerInfo();r=t?t.start:this._time}}t.unschedule(),t.timeline(this);const s=t.persist(),o={persist:null===s?this._persist:s,start:r+e,runner:t};return this._lastRunnerId=t.id,this._runners.push(o),this._runners.sort(((t,e)=>t.start-e.start)),this._runnerIds=this._runners.map((t=>t.runner.id)),this.updateTime()._continue(),this}seek(t){return this.time(this._time+t)}source(t){return null==t?this._timeSource:(this._timeSource=t,this)}speed(t){return null==t?this._speed:(this._speed=t,this)}stop(){return this.time(0),this.pause()}time(t){return null==t?this._time:(this._time=t,this._continue(!0))}unschedule(t){const e=this._runnerIds.indexOf(t.id);return e<0||(this._runners.splice(e,1),this._runnerIds.splice(e,1),t.timeline(null)),this}updateTime(){return this.active()||(this._lastSourceTime=this._timeSource()),this}_continue(t=!1){return ze.cancelFrame(this._nextFrame),this._nextFrame=null,t?this._stepImmediate():(this._paused||(this._nextFrame=ze.frame(this._step)),this)}_stepFn(t=!1){const e=this._timeSource();let n=e-this._lastSourceTime;t&&(n=0);const r=this._speed*n+(this._time-this._lastStepTime);this._lastSourceTime=e,t||(this._time+=r,this._time=this._time<0?0:this._time),this._lastStepTime=this._time,this.fire("time",this._time);for(let t=this._runners.length;t--;){const e=this._runners[t],n=e.runner;this._time-e.start<=0&&n.reset()}let i=!1;for(let t=0,e=this._runners.length;t<e;t++){const n=this._runners[t],s=n.runner;let o=r;const h=this._time-n.start;h<=0?i=!0:(h<o&&(o=h),s.active()&&(s.step(o).done?!0!==n.persist&&s.duration()-s.time()+this._time+n.persist<this._time&&(s.unschedule(),--t,--e):i=!0))}return i&&!(this._speed<0&&0===this._time)||this._runnerIds.length&&this._speed<0&&this._time>0?this._continue():(this.pause(),this.fire("finished")),this}}s({Element:{timeline:function(t){return null==t?(this._timeline=this._timeline||new He,this._timeline):(this._timeline=t,this)}}});class Ue extends At{constructor(t){super(),this.id=Ue.id++,t="function"==typeof(t=null==t?Lt.duration:t)?new de(t):t,this._element=null,this._timeline=null,this.done=!1,this._queue=[],this._duration="number"==typeof t&&t,this._isDeclarative=t instanceof de,this._stepper=this._isDeclarative?t:new pe,this._history={},this.enabled=!0,this._time=0,this._lastTime=0,this._reseted=!0,this.transforms=new ft,this.transformId=1,this._haveReversed=!1,this._reverse=!1,this._loopsDone=0,this._swing=!1,this._wait=0,this._times=1,this._frameId=null,this._persist=!!this._isDeclarative||null}static sanitise(t,e,n){let r=1,i=!1,s=0;return e=e||Lt.delay,n=n||"last","object"!=typeof(t=t||Lt.duration)||t instanceof fe||(e=t.delay||e,n=t.when||n,i=t.swing||i,r=t.times||r,s=t.wait||s,t=t.duration||Lt.duration),{duration:t,delay:e,swing:i,times:r,wait:s,when:n}}active(t){return null==t?this.enabled:(this.enabled=t,this)}addTransform(t,e){return this.transforms.lmultiplyO(t),this}after(t){return this.on("finished",t)}animate(t,e,n){const r=Ue.sanitise(t,e,n),i=new Ue(r.duration);return this._timeline&&i.timeline(this._timeline),this._element&&i.element(this._element),i.loop(r).schedule(r.delay,r.when)}clearTransform(){return this.transforms=new ft,this}clearTransformsFromQueue(){this.done&&this._timeline&&this._timeline._runnerIds.includes(this.id)||(this._queue=this._queue.filter((t=>!t.isTransform)))}delay(t){return this.animate(0,t)}duration(){return this._times*(this._wait+this._duration)-this._wait}during(t){return this.queue(null,t)}ease(t){return this._stepper=new pe(t),this}element(t){return null==t?this._element:(this._element=t,t._prepareRunner(),this)}finish(){return this.step(1/0)}loop(t,e,n){return"object"==typeof t&&(e=t.swing,n=t.wait,t=t.times),this._times=t||1/0,this._swing=e||!1,this._wait=n||0,!0===this._times&&(this._times=1/0),this}loops(t){const e=this._duration+this._wait;if(null==t){const t=Math.floor(this._time/e),n=(this._time-t*e)/this._duration;return Math.min(t+n,this._times)}const n=t%1,r=e*Math.floor(t)+this._duration*n;return this.time(r)}persist(t){return null==t?this._persist:(this._persist=t,this)}position(t){const e=this._time,n=this._duration,r=this._wait,i=this._times,s=this._swing,o=this._reverse;let h;if(null==t){const t=function(t){const e=s*Math.floor(t%(2*(r+n))/(r+n)),i=e&&!o||!e&&o,h=Math.pow(-1,i)*(t%(r+n))/n+i;return Math.max(Math.min(h,1),0)},a=i*(r+n)-r;return h=e<=0?Math.round(t(1e-5)):e<a?t(e):Math.round(t(a-1e-5)),h}const a=Math.floor(this.loops()),u=s&&a%2==0;return h=a+(u&&!o||o&&u?t:1-t),this.loops(h)}progress(t){return null==t?Math.min(1,this._time/this.duration()):this.time(t*this.duration())}queue(t,e,n,r){return this._queue.push({initialiser:t||Tt,runner:e||Tt,retarget:n,isTransform:r,initialised:!1,finished:!1}),this.timeline()&&this.timeline()._continue(),this}reset(){return this._reseted||(this.time(0),this._reseted=!0),this}reverse(t){return this._reverse=null==t?!this._reverse:t,this}schedule(t,e,n){if(t instanceof He||(n=e,e=t,t=this.timeline()),!t)throw Error("Runner cannot be scheduled without timeline");return t.schedule(this,e,n),this}step(t){if(!this.enabled)return this;t=null==t?16:t,this._time+=t;const e=this.position(),n=this._lastPosition!==e&&this._time>=0;this._lastPosition=e;const r=this.duration(),i=this._lastTime<=0&&this._time>0,s=this._lastTime<r&&this._time>=r;this._lastTime=this._time,i&&this.fire("start",this);const o=this._isDeclarative;this.done=!o&&!s&&this._time>=r,this._reseted=!1;let h=!1;return(n||o)&&(this._initialise(n),this.transforms=new ft,h=this._run(o?t:e),this.fire("step",this)),this.done=this.done||h&&o,s&&this.fire("finished",this),this}time(t){if(null==t)return this._time;const e=t-this._time;return this.step(e),this}timeline(t){return void 0===t?this._timeline:(this._timeline=t,this)}unschedule(){const t=this.timeline();return t&&t.unschedule(this),this}_initialise(t){if(t||this._isDeclarative)for(let e=0,n=this._queue.length;e<n;++e){const n=this._queue[e],r=this._isDeclarative||!n.initialised&&t;t=!n.finished,r&&t&&(n.initialiser.call(this),n.initialised=!0)}}_rememberMorpher(t,e){if(this._history[t]={morpher:e,caller:this._queue[this._queue.length-1]},this._isDeclarative){const t=this.timeline();t&&t.play()}}_run(t){let e=!0;for(let n=0,r=this._queue.length;n<r;++n){const r=this._queue[n],i=r.runner.call(this,t);r.finished=r.finished||!0===i,e=e&&r.finished}return e}_tryRetarget(t,e,n){if(this._history[t]){if(!this._history[t].caller.initialised){const e=this._queue.indexOf(this._history[t].caller);return this._queue.splice(e,1),!1}this._history[t].caller.retarget?this._history[t].caller.retarget.call(this,e,n):this._history[t].morpher.to(e),this._history[t].caller.finished=!1;const r=this.timeline();return r&&r.play(),!0}return!1}}Ue.id=0;class We{constructor(t=new ft,e=-1,n=!0){this.transforms=t,this.id=e,this.done=n}clearTransformsFromQueue(){}}q([Ue,We],{mergeWith(t){return new We(t.transforms.lmultiply(this.transforms),t.id)}});const Ze=(t,e)=>t.lmultiplyO(e),$e=t=>t.transforms;function Ke(){const t=this._transformationRunners.runners.map($e).reduce(Ze,new ft);this.transform(t),this._transformationRunners.merge(),1===this._transformationRunners.length()&&(this._frameId=null)}class Qe{constructor(){this.runners=[],this.ids=[]}add(t){if(this.runners.includes(t))return;const e=t.id+1;return this.runners.push(t),this.ids.push(e),this}clearBefore(t){const e=this.ids.indexOf(t+1)||1;return this.ids.splice(0,e,0),this.runners.splice(0,e,new We).forEach((t=>t.clearTransformsFromQueue())),this}edit(t,e){const n=this.ids.indexOf(t+1);return this.ids.splice(n,1,t+1),this.runners.splice(n,1,e),this}getByID(t){return this.runners[this.ids.indexOf(t+1)]}length(){return this.ids.length}merge(){let t=null;for(let e=0;e<this.runners.length;++e){const n=this.runners[e];if(!(t&&n.done&&t.done)||n._timeline&&n._timeline._runnerIds.includes(n.id)||t._timeline&&t._timeline._runnerIds.includes(t.id))t=n;else{this.remove(n.id);const r=n.mergeWith(t);this.edit(t.id,r),t=r,--e}}return this}remove(t){const e=this.ids.indexOf(t+1);return this.ids.splice(e,1),this.runners.splice(e,1),this}}s({Element:{animate(t,e,n){const r=Ue.sanitise(t,e,n),i=this.timeline();return new Ue(r.duration).loop(r).element(this).timeline(i.play()).schedule(r.delay,r.when)},delay(t,e){return this.animate(0,t,e)},_clearTransformRunnersBefore(t){this._transformationRunners.clearBefore(t.id)},_currentTransform(t){return this._transformationRunners.runners.filter((e=>e.id<=t.id)).map($e).reduce(Ze,new ft)},_addRunner(t){this._transformationRunners.add(t),ze.cancelImmediate(this._frameId),this._frameId=ze.immediate(Ke.bind(this))},_prepareRunner(){null==this._frameId&&(this._transformationRunners=(new Qe).add(new We(new ft(this))))}}}),q(Ue,{attr(t,e){return this.styleAttr("attr",t,e)},css(t,e){return this.styleAttr("css",t,e)},styleAttr(t,e,n){if("string"==typeof e)return this.styleAttr(t,{[e]:n});let r=e;if(this._tryRetarget(t,r))return this;let i=new Te(this._stepper).to(r),s=Object.keys(r);return this.queue((function(){i=i.from(this.element()[t](s))}),(function(e){return this.element()[t](i.at(e).valueOf()),i.done()}),(function(e){const n=Object.keys(e),o=(h=s,n.filter((t=>!h.includes(t))));var h;if(o.length){const e=this.element()[t](o),n=new Ie(i.from()).valueOf();Object.assign(n,e),i.from(n)}const a=new Ie(i.to()).valueOf();Object.assign(a,e),i.to(a),s=n,r=e})),this._rememberMorpher(t,i),this},zoom(t,e){if(this._tryRetarget("zoom",t,e))return this;let n=new Te(this._stepper).to(new Pt(t));return this.queue((function(){n=n.from(this.element().zoom())}),(function(t){return this.element().zoom(n.at(t),e),n.done()}),(function(t,r){e=r,n.to(t)})),this._rememberMorpher("zoom",n),this},transform(t,e,n){if(e=t.relative||e,this._isDeclarative&&!e&&this._tryRetarget("transform",t))return this;const r=ft.isMatrixLike(t);n=null!=t.affine?t.affine:null!=n?n:!r;const i=new Te(this._stepper).type(n?Ne:ft);let s,o,h,a,u;return this.queue((function(){o=o||this.element(),s=s||m(t,o),u=new ft(e?void 0:o),o._addRunner(this),e||o._clearTransformRunnersBefore(this)}),(function(c){e||this.clearTransform();const{x:l,y:f}=new ct(s).transform(o._currentTransform(this));let p=new ft({...t,origin:[l,f]}),d=this._isDeclarative&&h?h:u;if(n){p=p.decompose(l,f),d=d.decompose(l,f);const t=p.rotate,e=d.rotate,n=[t-360,t,t+360],r=n.map((t=>Math.abs(t-e))),i=Math.min(...r),s=r.indexOf(i);p.rotate=n[s]}e&&(r||(p.rotate=t.rotate||0),this._isDeclarative&&a&&(d.rotate=a)),i.from(d),i.to(p);const m=i.at(c);return a=m.rotate,h=new ft(m),this.addTransform(h),o._addRunner(this),i.done()}),(function(e){(e.origin||"center").toString()!==(t.origin||"center").toString()&&(s=m(e,o)),t={...e,origin:s}}),!0),this._isDeclarative&&this._rememberMorpher("transform",i),this},x(t,e){return this._queueNumber("x",t)},y(t){return this._queueNumber("y",t)},dx(t=0){return this._queueNumberDelta("x",t)},dy(t=0){return this._queueNumberDelta("y",t)},dmove(t,e){return this.dx(t).dy(e)},_queueNumberDelta(t,e){if(e=new Pt(e),this._tryRetarget(t,e))return this;const n=new Te(this._stepper).to(e);let r=null;return this.queue((function(){r=this.element()[t](),n.from(r),n.to(r+e)}),(function(e){return this.element()[t](n.at(e)),n.done()}),(function(t){n.to(r+new Pt(t))})),this._rememberMorpher(t,n),this},_queueObject(t,e){if(this._tryRetarget(t,e))return this;const n=new Te(this._stepper).to(e);return this.queue((function(){n.from(this.element()[t]())}),(function(e){return this.element()[t](n.at(e)),n.done()})),this._rememberMorpher(t,n),this},_queueNumber(t,e){return this._queueObject(t,new Pt(e))},cx(t){return this._queueNumber("cx",t)},cy(t){return this._queueNumber("cy",t)},move(t,e){return this.x(t).y(e)},center(t,e){return this.cx(t).cy(e)},size(t,e){let n;return t&&e||(n=this._element.bbox()),t||(t=n.width/n.height*e),e||(e=n.height/n.width*t),this.width(t).height(e)},width(t){return this._queueNumber("width",t)},height(t){return this._queueNumber("height",t)},plot(t,e,n,r){if(4===arguments.length)return this.plot([t,e,n,r]);if(this._tryRetarget("plot",t))return this;const i=new Te(this._stepper).type(this._element.MorphArray).to(t);return this.queue((function(){i.from(this._element.array())}),(function(t){return this._element.plot(i.at(t)),i.done()})),this._rememberMorpher("plot",i),this},leading(t){return this._queueNumber("leading",t)},viewbox(t,e,n,r){return this._queueObject("viewbox",new mt(t,e,n,r))},update(t){return"object"!=typeof t?this.update({offset:arguments[0],color:arguments[1],opacity:arguments[2]}):(null!=t.opacity&&this.attr("stop-opacity",t.opacity),null!=t.color&&this.attr("stop-color",t.color),null!=t.offset&&this.attr("offset",t.offset),this)}}),q(Ue,{rx:Xt,ry:zt,from:Jt,to:te}),D(Ue,"Runner");class Je extends Dt{constructor(t,e=t){super(j("svg",t),e),this.namespace()}defs(){return this.isRoot()?F(this.node.querySelector("defs"))||this.put(new Vt):this.root().defs()}isRoot(){return!this.node.parentNode||!(this.node.parentNode instanceof O.window.SVGElement)&&"#document-fragment"!==this.node.parentNode.nodeName}namespace(){return this.isRoot()?this.attr({xmlns:y,version:"1.1"}).attr("xmlns:xlink",v,g).attr("xmlns:svgjs",b,g):this.root().namespace()}removeNamespace(){return this.attr({xmlns:null,version:null}).attr("xmlns:xlink",null,g).attr("xmlns:svgjs",null,g)}root(){return this.isRoot()?this:super.root()}}s({Container:{nested:B((function(){return this.put(new Je)}))}}),D(Je,"Svg",!0);class tn extends Dt{constructor(t,e=t){super(j("symbol",t),e)}}s({Container:{symbol:B((function(){return this.put(new tn)}))}}),D(tn,"Symbol");var en={__proto__:null,plain:function(t){return!1===this._build&&this.clear(),this.node.appendChild(O.document.createTextNode(t)),this},length:function(){return this.node.getComputedTextLength()},x:function(t,e=this.bbox()){return null==t?e.x:this.attr("x",this.attr("x")+t-e.x)},y:function(t,e=this.bbox()){return null==t?e.y:this.attr("y",this.attr("y")+t-e.y)},move:function(t,e,n=this.bbox()){return this.x(t,n).y(e,n)},cx:function(t,e=this.bbox()){return null==t?e.cx:this.attr("x",this.attr("x")+t-e.cx)},cy:function(t,e=this.bbox()){return null==t?e.cy:this.attr("y",this.attr("y")+t-e.cy)},center:function(t,e,n=this.bbox()){return this.cx(t,n).cy(e,n)},ax:function(t){return this.attr("x",t)},ay:function(t){return this.attr("y",t)},amove:function(t,e){return this.ax(t).ay(e)},build:function(t){return this._build=!!t,this}};class nn extends Yt{constructor(t,e=t){super(j("text",t),e),this.dom.leading=new Pt(1.3),this._rebuild=!0,this._build=!1}leading(t){return null==t?this.dom.leading:(this.dom.leading=new Pt(t),this.rebuild())}rebuild(t){if("boolean"==typeof t&&(this._rebuild=t),this._rebuild){const t=this;let e=0;const n=this.dom.leading;this.each((function(r){const i=O.window.getComputedStyle(this.node).getPropertyValue("font-size"),s=n*new Pt(i);this.dom.newLined&&(this.attr("x",t.attr("x")),"\n"===this.text()?e+=s:(this.attr("dy",r?s+e:0),e=0))})),this.fire("rebuild")}return this}setData(t){return this.dom=t,this.dom.leading=new Pt(t.leading||1.3),this}text(t){if(void 0===t){const e=this.node.childNodes;let n=0;t="";for(let r=0,i=e.length;r<i;++r)"textPath"!==e[r].nodeName?(r!==n&&3!==e[r].nodeType&&!0===F(e[r]).dom.newLined&&(t+="\n"),t+=e[r].textContent):0===r&&(n=1);return t}if(this.clear().build(!0),"function"==typeof t)t.call(this,this);else for(let e=0,n=(t=(t+"").split("\n")).length;e<n;e++)this.newLine(t[e]);return this.build(!1).rebuild()}}q(nn,en),s({Container:{text:B((function(t=""){return this.put(new nn).text(t)})),plain:B((function(t=""){return this.put(new nn).plain(t)}))}}),D(nn,"Text");class rn extends Yt{constructor(t,e=t){super(j("tspan",t),e),this._build=!1}dx(t){return this.attr("dx",t)}dy(t){return this.attr("dy",t)}newLine(){this.dom.newLined=!0;const t=this.parent();if(!(t instanceof nn))return this;const e=t.index(this),n=O.window.getComputedStyle(this.node).getPropertyValue("font-size"),r=t.dom.leading*new Pt(n);return this.dy(e?r:0).attr("x",t.x())}text(t){return null==t?this.node.textContent+(this.dom.newLined?"\n":""):("function"==typeof t?(this.clear().build(!0),t.call(this,this),this.build(!1)):this.plain(t),this)}}q(rn,en),s({Tspan:{tspan:B((function(t=""){const e=new rn;return this._build||this.clear(),this.put(e).text(t)}))},Text:{newLine:function(t=""){return this.tspan(t).newLine()}}}),D(rn,"Tspan");class sn extends Yt{constructor(t,e=t){super(j("circle",t),e)}radius(t){return this.attr("r",t)}rx(t){return this.attr("r",t)}ry(t){return this.rx(t)}size(t){return this.radius(new Pt(t).divide(2))}}q(sn,{x:qt,y:Bt,cx:Ht,cy:Ut,width:Wt,height:Zt}),s({Container:{circle:B((function(t=0){return this.put(new sn).size(t).move(0,0)}))}}),D(sn,"Circle");class on extends Dt{constructor(t,e=t){super(j("clipPath",t),e)}remove(){return this.targets().forEach((function(t){t.unclip()})),super.remove()}targets(){return gt('svg [clip-path*="'+this.id()+'"]')}}s({Container:{clip:B((function(){return this.defs().put(new on)}))},Element:{clipper(){return this.reference("clip-path")},clipWith(t){const e=t instanceof on?t:this.parent().clip().add(t);return this.attr("clip-path",'url("#'+e.id()+'")')},unclip(){return this.attr("clip-path",null)}}}),D(on,"ClipPath");class hn extends Rt{constructor(t,e=t){super(j("foreignObject",t),e)}}s({Container:{foreignObject:B((function(t,e){return this.put(new hn).size(t,e)}))}}),D(hn,"ForeignObject");var an={__proto__:null,dmove:function(t,e){return this.children().forEach(((n,r)=>{let i;try{i=n.bbox()}catch(t){return}const s=new ft(n),o=s.translate(t,e).transform(s.inverse()),h=new ct(i.x,i.y).transform(o);n.move(h.x,h.y)})),this},dx:function(t){return this.dmove(t,0)},dy:function(t){return this.dmove(0,t)},height:function(t,e=this.bbox()){return null==t?e.height:this.size(e.width,t,e)},move:function(t=0,e=0,n=this.bbox()){const r=t-n.x,i=e-n.y;return this.dmove(r,i)},size:function(t,e,n=this.bbox()){const r=d(this,t,e,n),i=r.width/n.width,s=r.height/n.height;return this.children().forEach(((t,e)=>{const r=new ct(n).transform(new ft(t).inverse());t.scale(i,s,r.x,r.y)})),this},width:function(t,e=this.bbox()){return null==t?e.width:this.size(t,e.height,e)},x:function(t,e=this.bbox()){return null==t?e.x:this.move(t,e.y,e)},y:function(t,e=this.bbox()){return null==t?e.y:this.move(e.x,t,e)}};class un extends Dt{constructor(t,e=t){super(j("g",t),e)}}q(un,an),s({Container:{group:B((function(){return this.put(new un)}))}}),D(un,"G");class cn extends Dt{constructor(t,e=t){super(j("a",t),e)}target(t){return this.attr("target",t)}to(t){return this.attr("href",t,v)}}q(cn,an),s({Container:{link:B((function(t){return this.put(new cn).to(t)}))},Element:{unlink(){const t=this.linker();if(!t)return this;const e=t.parent();if(!e)return this.remove();const n=e.index(t);return e.add(this,n),t.remove(),this},linkTo(t){let e=this.linker();return e||(e=new cn,this.wrap(e)),"function"==typeof t?t.call(e,e):e.to(t),this},linker(){const t=this.parent();return t&&"a"===t.node.nodeName.toLowerCase()?t:null}}}),D(cn,"A");class ln extends Dt{constructor(t,e=t){super(j("mask",t),e)}remove(){return this.targets().forEach((function(t){t.unmask()})),super.remove()}targets(){return gt('svg [mask*="'+this.id()+'"]')}}s({Container:{mask:B((function(){return this.defs().put(new ln)}))},Element:{masker(){return this.reference("mask")},maskWith(t){const e=t instanceof ln?t:this.parent().mask().add(t);return this.attr("mask",'url("#'+e.id()+'")')},unmask(){return this.attr("mask",null)}}}),D(ln,"Mask");class fn extends Rt{constructor(t,e=t){super(j("stop",t),e)}update(t){return("number"==typeof t||t instanceof Pt)&&(t={offset:arguments[0],color:arguments[1],opacity:arguments[2]}),null!=t.opacity&&this.attr("stop-opacity",t.opacity),null!=t.color&&this.attr("stop-color",t.color),null!=t.offset&&this.attr("offset",new Pt(t.offset)),this}}s({Gradient:{stop:function(t,e,n){return this.put(new fn).update(t,e,n)}}}),D(fn,"Stop");class pn extends Rt{constructor(t,e=t){super(j("style",t),e)}addText(t=""){return this.node.textContent+=t,this}font(t,e,n={}){return this.rule("@font-face",{fontFamily:t,src:e,...n})}rule(t,e){return this.addText(function(t,e){if(!t)return"";if(!e)return t;let n=t+"{";for(const t in e)n+=f(t)+":"+e[t]+";";return n+="}",n}(t,e))}}s("Dom",{style(t,e){return this.put(new pn).rule(t,e)},fontface(t,e,n){return this.put(new pn).font(t,e,n)}}),D(pn,"Style");class dn extends nn{constructor(t,e=t){super(j("textPath",t),e)}array(){const t=this.track();return t?t.array():null}plot(t){const e=this.track();let n=null;return e&&(n=e.plot(t)),null==t?n:this}track(){return this.reference("href")}}s({Container:{textPath:B((function(t,e){return t instanceof nn||(t=this.text(t)),t.path(e)}))},Text:{path:B((function(t,e=!0){const n=new dn;let r;if(t instanceof Re||(t=this.defs().path(t)),n.attr("href","#"+t,v),e)for(;r=this.node.firstChild;)n.node.appendChild(r);return this.put(n)})),textPath(){return this.findOne("textPath")}},Path:{text:B((function(t){return t instanceof nn||(t=(new nn).addTo(this.parent()).text(t)),t.path(this)})),targets(){return gt("svg textPath").filter((t=>(t.attr("href")||"").includes(this.id())))}}}),dn.prototype.MorphArray=Ce,D(dn,"TextPath");class mn extends Yt{constructor(t,e=t){super(j("use",t),e)}use(t,e){return this.attr("href",(e||"")+"#"+t,v)}}s({Container:{use:B((function(t,e){return this.put(new mn).use(t,e)}))}}),D(mn,"Use");const _n=P;q([Je,tn,se,ie,ue],o("viewbox")),q([ae,Ve,De,Re],o("marker")),q(nn,o("Text")),q(Re,o("Path")),q(Vt,o("Defs")),q([nn,rn],o("Tspan")),q([Ye,Kt,re,Ue],o("radius")),q(At,o("EventTarget")),q(Ft,o("Dom")),q(Rt,o("Element")),q(Yt,o("Shape")),q([Dt,Qt],o("Container")),q(re,o("Gradient")),q(Ue,o("Runner")),yt.extend([...new Set(i)]),je([Pt,ut,mt,ft,It,oe,Ce,ct]),Fe()},187:t=>{var e,n="object"==typeof Reflect?Reflect:null,r=n&&"function"==typeof n.apply?n.apply:function(t,e,n){return Function.prototype.apply.call(t,e,n)};e=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var i=Number.isNaN||function(t){return t!=t};function s(){s.init.call(this)}t.exports=s,t.exports.once=function(t,e){return new Promise((function(n,r){function i(n){t.removeListener(e,s),r(n)}function s(){"function"==typeof t.removeListener&&t.removeListener("error",i),n([].slice.call(arguments))}m(t,e,s,{once:!0}),"error"!==e&&function(t,e,n){"function"==typeof t.on&&m(t,"error",e,{once:!0})}(t,i)}))},s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var o=10;function h(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function a(t){return void 0===t._maxListeners?s.defaultMaxListeners:t._maxListeners}function u(t,e,n,r){var i,s,o,u;if(h(n),void 0===(s=t._events)?(s=t._events=Object.create(null),t._eventsCount=0):(void 0!==s.newListener&&(t.emit("newListener",e,n.listener?n.listener:n),s=t._events),o=s[e]),void 0===o)o=s[e]=n,++t._eventsCount;else if("function"==typeof o?o=s[e]=r?[n,o]:[o,n]:r?o.unshift(n):o.push(n),(i=a(t))>0&&o.length>i&&!o.warned){o.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=t,c.type=e,c.count=o.length,u=c,console&&console.warn&&console.warn(u)}return t}function c(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function l(t,e,n){var r={fired:!1,wrapFn:void 0,target:t,type:e,listener:n},i=c.bind(r);return i.listener=n,r.wrapFn=i,i}function f(t,e,n){var r=t._events;if(void 0===r)return[];var i=r[e];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(t){for(var e=new Array(t.length),n=0;n<e.length;++n)e[n]=t[n].listener||t[n];return e}(i):d(i,i.length)}function p(t){var e=this._events;if(void 0!==e){var n=e[t];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function d(t,e){for(var n=new Array(e),r=0;r<e;++r)n[r]=t[r];return n}function m(t,e,n,r){if("function"==typeof t.on)r.once?t.once(e,n):t.on(e,n);else{if("function"!=typeof t.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof t);t.addEventListener(e,(function i(s){r.once&&t.removeEventListener(e,i),n(s)}))}}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return o},set:function(t){if("number"!=typeof t||t<0||i(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");o=t}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||i(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},s.prototype.getMaxListeners=function(){return a(this)},s.prototype.emit=function(t){for(var e=[],n=1;n<arguments.length;n++)e.push(arguments[n]);var i="error"===t,s=this._events;if(void 0!==s)i=i&&void 0===s.error;else if(!i)return!1;if(i){var o;if(e.length>0&&(o=e[0]),o instanceof Error)throw o;var h=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw h.context=o,h}var a=s[t];if(void 0===a)return!1;if("function"==typeof a)r(a,this,e);else{var u=a.length,c=d(a,u);for(n=0;n<u;++n)r(c[n],this,e)}return!0},s.prototype.addListener=function(t,e){return u(this,t,e,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(t,e){return u(this,t,e,!0)},s.prototype.once=function(t,e){return h(e),this.on(t,l(this,t,e)),this},s.prototype.prependOnceListener=function(t,e){return h(e),this.prependListener(t,l(this,t,e)),this},s.prototype.removeListener=function(t,e){var n,r,i,s,o;if(h(e),void 0===(r=this._events))return this;if(void 0===(n=r[t]))return this;if(n===e||n.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete r[t],r.removeListener&&this.emit("removeListener",t,n.listener||e));else if("function"!=typeof n){for(i=-1,s=n.length-1;s>=0;s--)if(n[s]===e||n[s].listener===e){o=n[s].listener,i=s;break}if(i<0)return this;0===i?n.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(n,i),1===n.length&&(r[t]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",t,o||e)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(t){var e,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[t]),this;if(0===arguments.length){var i,s=Object.keys(n);for(r=0;r<s.length;++r)"removeListener"!==(i=s[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=n[t]))this.removeListener(t,e);else if(void 0!==e)for(r=e.length-1;r>=0;r--)this.removeListener(t,e[r]);return this},s.prototype.listeners=function(t){return f(this,t,!0)},s.prototype.rawListeners=function(t){return f(this,t,!1)},s.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):p.call(t,e)},s.prototype.listenerCount=p,s.prototype.eventNames=function(){return this._eventsCount>0?e(this._events):[]}},352:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GameWorld=void 0;var r=n(540),i=n(215),s=n(105),o=n(808),h=n(728),a=n(847),u=n(38),c=function(){function t(t,e){this._shapeTypesQueue=[],this._movingShape=null,this._shapeTypes=[o.ShapeType.I,o.ShapeType.J,o.ShapeType.L,o.ShapeType.O,o.ShapeType.S,o.ShapeType.Z,o.ShapeType.T],this._shapeFactory=new a.ShapeFactory,this._map=new h.GameMap(t,e),this._map.on("newShape",(function(t){u.SVGContext.drawShape(t,r.GAME_CONFIG.CELL_SIZE),t.on("left",(function(){u.SVGContext.updateShape(t,r.GAME_CONFIG.CELL_SIZE)})),t.on("right",(function(){u.SVGContext.updateShape(t,r.GAME_CONFIG.CELL_SIZE)})),t.on("down",(function(){u.SVGContext.updateShape(t,r.GAME_CONFIG.CELL_SIZE)})),t.on("rotate",(function(){u.SVGContext.redrawShape(t,r.GAME_CONFIG.CELL_SIZE)})),t.on("change",(function(){u.SVGContext.redrawShape(t,r.GAME_CONFIG.CELL_SIZE)}))})),this._map.on("removeShape",(function(t){u.SVGContext.destroyShape(t)})),this.init()}return Object.defineProperty(t.prototype,"gameOver",{get:function(){return this._gameOver},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"score",{get:function(){return this._score},enumerable:!1,configurable:!0}),t.prototype.increaseScore=function(t){this._score+=t},t.prototype.handleInput=function(){i.keyboard.isPressed(r.GAME_CONFIG.UP_KEY)?this._map.doShapeAction(this._movingShape,"rotate"):i.keyboard.isPressed(r.GAME_CONFIG.DOWN_KEY)?(this._map.doShapeAction(this._movingShape,"down"),this.increaseScore(r.GAME_CONFIG.LOWERED_SHAPE_BONUS)):i.keyboard.isPressed(r.GAME_CONFIG.LEFT_KEY)?this._map.doShapeAction(this._movingShape,"left"):i.keyboard.isPressed(r.GAME_CONFIG.RIGHT_KEY)&&this._map.doShapeAction(this._movingShape,"right")},t.prototype.handleFilledLines=function(){var t=this._map.removeFilledLines();t>0&&(this.increaseScore(t*r.GAME_CONFIG.FILLED_LINE_BONUS),this._updateEveryXFrames>0&&this._updateEveryXFrames--)},t.prototype.generateRandomShapeType=function(){var t=Math.floor(Math.random()*this._shapeTypes.length);return this._shapeTypes[t]},t.prototype.buildShape=function(t){var e=Math.floor(7*Math.random());return r.GAME_CONFIG.SHAPE_COLORS[e],this._shapeFactory.createShape(t,new s.Vector2(Math.floor(this._map.width/2),3),e)},t.prototype.init=function(){this._gameOver=!1,this._score=0,this._frame=0,this._updateEveryXFrames=r.GAME_CONFIG.UPDATE_AFTER_X_FRAMES,this._map.init();var t=this.generateRandomShapeType();this._shapeTypesQueue=[t],this._movingShape=this.buildShape(this.generateRandomShapeType()),this._map.addShape(this._movingShape)},t.prototype.update=function(){if(this.handleInput(),!(++this._frame%this._updateEveryXFrames||this._map.doShapeAction(this._movingShape,"down"))){this.handleFilledLines();var t=this.generateRandomShapeType();this._shapeTypesQueue.unshift(t),this._movingShape=this.buildShape(this._shapeTypesQueue.pop()),this._gameOver=!this._map.addShape(this._movingShape)}},t.prototype.draw=function(){},t}();e.GameWorld=c},38:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SVGContext=void 0;var r=n(105),i=n(500),s=function(){function t(t){var e=this;this._shapes=new Map,this._gradients=[],this._svg=(0,i.SVG)().addTo("#game").height("100%"),this._gradients=[["#8E2DE2","#4A00E0"],["#EC6F66","#F3A183"],["#514A9D","#24C6DC"],["#232526","#414345"],["#1CD8D2","#93EDC7"],["#EB3349","#F45C43"],["#AA076B","#61045F"]].map((function(t){var n=t[0],r=t[1];return e._svg.gradient("linear",(function(t){t.stop(0,n),t.stop(1,r),t.from(0,0).to(1,1)}))}))}return t.prototype.drawShape=function(t,e){var n=this;if(this._shapes.has(t))return this._shapes.get(t);var r=this._svg.nested();return t.cells.forEach((function(i){n.drawCell(r,i,e,t.color)})),r.x(t.position.X*e).y(t.position.Y*e),this._shapes.set(t,r),r},t.prototype.drawCell=function(t,e,n,i){if(t.rect(n-n/10,n-n/10).radius(n/10).x(e.coords.X*n+n/20).y(e.coords.Y*n+n/20).fill(this._gradients[i]),!e.shape.cells.find((function(t){return e.coords.X===t.coords.X&&e.coords.Y-1===t.coords.Y}))){document.createElementNS("http://www.w3.org/2000/svg","path");var s=[{command:"M",coords:new r.Vector2(0,0)},{command:"L",coords:new r.Vector2(n/5,n/5)},{command:"L",coords:new r.Vector2(n-n/5,n/5)},{command:"L",coords:new r.Vector2(n,0)},{command:"L",coords:new r.Vector2(0,0)}].map((function(t){return"".concat(t.command).concat(e.coords.X*n+t.coords.X," ").concat(e.coords.Y*n+t.coords.Y)})).join(" ");t.path(s).fill({color:"#ffffff",opacity:.4})}},t.prototype.updateShape=function(t,e){if(this._shapes.has(t)){var n=this._shapes.get(t),r=parseInt(n.x().toString()),i=parseInt(n.y().toString()),s=t.position.X*e,o=t.position.Y*e,h=2e3/Math.sqrt(Math.pow(r-s,2)+Math.pow(i-o,2));n.animate(h).ease("<>").move(s,o)}},t.prototype.destroyShape=function(t){this._shapes.has(t)&&(this._shapes.get(t).remove(),this._shapes.delete(t))},t.prototype.redrawShape=function(t,e){var n=this;if(this._shapes.has(t)){var r=this._shapes.get(t);r.clear(),t.cells.forEach((function(i){n.drawCell(r,i,e,t.color)})),r.x(t.position.X*e).y(t.position.Y*e)}},t}(),o=document.getElementById("game");e.SVGContext=new s(o)},540:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GAME_CONFIG=void 0,e.GAME_CONFIG={SHOW_ORIGINS:!1,UPDATE_AFTER_X_FRAMES:40,GAME_WIDTH:15,GAME_HEIGHT:20,CANVAS_MIN_WIDTH:300,CANVAS_MIN_HEIGHT:400,CELL_SIZE:20,NEXT_SHAPE_CELL_SIZE:5,STROKE_WIDTH:.5,BACKGROUND_COLOR:"#28363B",STROKE_COLOR:"black",SHAPE_COLORS:["#F9B38F","#BF6C86","#84AF9C","#6D5C80","#FFA3D0","#439F9E","#EF5F3C"],SCORE_LABEL_FONT:"10px Comic Sans MS",NEXT_SHAPE_LABEL_FONT:"10px Comic Sans MS",GAME_OVER_LABEL_FONT:"25px Comic Sans MS",GAME_OVER_YOUR_SCORE_LABEL_FONT:"15px Comic Sans MS",FONT_COLOR:"white",SCORE_LABEL:"Score: ",NEXT_SHAPE_LABEL:"Next Shape: ",GAME_OVER_LABEL:"Game Over!",GAME_OVER_YOUR_SCORE_LABEL:"Your Score: ",NEXT_SHAPE_POSITION:{X:283,Y:6},SCORE_LABEL_POSITION:{X:5,Y:13,ALIGNMENT:"left"},NEXT_SHAPE_LABEL_POSITION:{X:215,Y:13,ALIGNMENT:"left"},GAME_OVER_LABEL_POSITION:{X:150,Y:200,ALIGNMENT:"center"},GAME_OVER_YOUR_SCORE_LABEL_POSITION:{X:150,Y:235,ALIGNMENT:"center"},START_KEY:32,LEFT_KEY:37,RIGHT_KEY:39,UP_KEY:38,DOWN_KEY:40,DROP:13,FILLED_LINE_BONUS:100,DROPPED_SHAPE_BONUS:2,LOWERED_SHAPE_BONUS:1}},105:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Vector2=void 0;var n=function(){function t(t,e){this._x=t,this._y=e}return Object.defineProperty(t.prototype,"X",{get:function(){return this._x},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"Y",{get:function(){return this._y},enumerable:!1,configurable:!0}),Object.defineProperty(t,"Zero",{get:function(){return new t(0,0)},enumerable:!1,configurable:!0}),t.prototype.addX=function(e){return new t(this._x,this._y).addToX(e)},t.prototype.addY=function(e){return new t(this._x,this._y).addToY(e)},t.prototype.addToX=function(t){return this._x+=t,this},t.prototype.addToY=function(t){return this._y+=t,this},t.prototype.add=function(t){return this.addToX(t.X),this.addToY(t.Y),this},t}();e.Vector2=n},215:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.keyboard=void 0;var n=function(){function t(){var t=this;this._keysPressed=[],document.addEventListener("keydown",(function(e){t.keyDown(e)}))}return t.prototype.keyDown=function(t){this._keysPressed[t.keyCode]=!0},t.prototype.reset=function(){this._keysPressed=[]},t.prototype.isPressed=function(t){return this._keysPressed[t]},t}();e.keyboard=new n},728:function(t,e,n){var r,i=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.GameMap=void 0;var s=n(187),o=n(105),h=function(t){function e(e,n){var r=t.call(this)||this;return r._shapes=[],r._width=e,r._height=n,r.init(),r}return i(e,t),Object.defineProperty(e.prototype,"height",{get:function(){return this._height},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"width",{get:function(){return this._width},enumerable:!1,configurable:!0}),e.prototype.init=function(){this._map=[];for(var t=0;t<this._height;t++){this._map[t]=[];for(var e=0;e<this._width;e++)this._map[t][e]=void 0}},e.prototype.addShape=function(t){var e=this;return!!this.isShapeValidPlace(t)&&(this._shapes.push(t),t.on("empty",(function(){return e.removeShape(t)})),this.emit("newShape",t),this.cacheShapeCells(t),!0)},e.prototype.doShapeAction=function(t,e){var n=t.clone();return n.do(e),!!this.isShapeValidPlace(n,t)&&(this.clearShapeCache(t),t.do(e),this.cacheShapeCells(t),!0)},e.prototype.removeShape=function(t){var e=this._shapes.indexOf(t,0);e>-1&&(this.clearShapeCache(t),this._shapes.splice(e,1),this.emit("removeShape",t))},e.prototype.isInMap=function(t){var e=[t.X,t.Y],n=e[0],r=e[1];return n>=0&&n<this._width&&r>=0&&r<this._height},e.prototype.getCell=function(t){if(this.isInMap(t)&&void 0!==this._map[t.Y][t.X])return this._map[t.Y][t.X]},e.prototype.isCellFilled=function(t){return!!this.getCell(t)},e.prototype.clearShapeCache=function(t){var e=this;t.cells.forEach((function(t){e.isInMap(t.position)&&(e._map[t.Y][t.X]=void 0)}))},e.prototype.cacheShapeCells=function(t){var e=this;t.cells.forEach((function(t){e.isInMap(t.position)&&(e._map[t.Y][t.X]=t)}))},e.prototype.isShapeValidPlace=function(t,e){var n=this;return t.cells.every((function(t){if(!n.isInMap(t.position))return!1;var r=n.getCell(t.position);return!r||!!e&&e.isPartOfShape(r)}))},e.prototype.removeFilledLines=function(){for(var t=0,e=0;e<this._map.length;e++)this._map[e].every((function(t){return void 0!==t}))&&(t++,this.removeLine(e));return t},e.prototype.removeLine=function(t){var e=this;this._map[t].forEach((function(t){e._shapes.find((function(e){return e.isPartOfShape(t)})).removeCell(t)}));for(var n=0;n<t;n++)this._map[n].forEach((function(t){t&&t.move(new o.Vector2(0,1))}));this._map.splice(t,1);for(var r=[],i=0;i<this._width;i++)r[i]=void 0;this._map.unshift(r)},e}(s.EventEmitter);e.GameMap=h},185:function(t,e,n){var r,i=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.Cell=void 0;var s=n(187),o=n(105),h=function(t){function e(e,n){var r=t.call(this)||this;return r._shape=n,r._coords=e,r}return i(e,t),Object.defineProperty(e.prototype,"coords",{get:function(){return this._coords},set:function(t){this._coords=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"shape",{get:function(){return this._shape},set:function(t){this._shape=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"position",{get:function(){return new o.Vector2(this.X,this.Y)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"X",{get:function(){return this._shape.position.X+this._coords.X},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"Y",{get:function(){return this._shape.position.Y+this._coords.Y},enumerable:!1,configurable:!0}),e.prototype.move=function(t){this._coords.add(t),this.emit("move")},e}(s.EventEmitter);e.Cell=h},189:function(t,e,n){var r,i=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.Shape=void 0;var s=n(187),o=n(105),h=n(185),a=function(){function t(){}return t.prototype.move=function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=0),t.position.addToX(e).addToY(n)},t}(),u=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.name="down",e}return i(e,t),e.prototype.do=function(t){this.move(t,0,1)},e}(a),c=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.name="right",e}return i(e,t),e.prototype.do=function(t){this.move(t,1,0)},e}(a),l=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.name="left",e}return i(e,t),e.prototype.do=function(t){this.move(t,-1,0)},e}(a),f=function(){function t(){this.name="rotate"}return t.prototype.do=function(t){t.cells.forEach((function(e){var n=e.coords.X,r=e.coords.Y+t.origin.X-t.origin.Y,i=t.origin.X+t.origin.Y-n-1;e.coords=new o.Vector2(r,i)}))},t}(),p=function(t){function e(e,n,r,i){void 0===i&&(i=new o.Vector2(.5,.5));var s=t.call(this)||this;return s._cells=[],s._color=0,s._position=null,s._origin=null,s._actions=[new u,new l,new c,new f],s._cells=e,s._cells.forEach((function(t){t.on("move",(function(){return s.emit("change")})),t.shape=s})),s._position=n,s._color=r,s._origin=i,s}return i(e,t),Object.defineProperty(e.prototype,"cells",{get:function(){return this._cells},set:function(t){this._cells=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"position",{get:function(){return this._position},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"color",{get:function(){return this._color},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"origin",{get:function(){return this._origin},enumerable:!1,configurable:!0}),e.prototype.do=function(t){this._actions.find((function(e){return e.name===t})).do(this),this.emit(t)},e.prototype.removeCell=function(t){var e=this._cells.indexOf(t,0);e>-1&&(this._cells.splice(e,1),0===this._cells.length&&this.emit("empty"))},e.prototype.isPartOfShape=function(t){return this._cells.includes(t)},e.prototype.clone=function(){return new e(this._cells.map((function(t){return new h.Cell(t.coords)})),new o.Vector2(this._position.X,this._position.Y),this._color,new o.Vector2(this._origin.X,this._origin.Y))},e}(s.EventEmitter);e.Shape=p},847:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ShapeFactory=void 0;var r=n(808),i=n(105),s=n(189),o=n(185),h=function(){function t(){}return t.prototype.createShape=function(t,e,n){var h,a=[];switch(t){case r.ShapeType.I:a=[new i.Vector2(0,-1),new i.Vector2(0,0),new i.Vector2(0,1),new i.Vector2(0,2)].map((function(t){return new o.Cell(t)})),h=new i.Vector2(0,1);break;case r.ShapeType.J:a=[new i.Vector2(0,-1),new i.Vector2(0,0),new i.Vector2(0,1),new i.Vector2(-1,1)].map((function(t){return new o.Cell(t)}));break;case r.ShapeType.L:a=[new i.Vector2(0,-1),new i.Vector2(0,0),new i.Vector2(0,1),new i.Vector2(1,1)].map((function(t){return new o.Cell(t)}));break;case r.ShapeType.O:a=[new i.Vector2(-1,0),new i.Vector2(0,0),new i.Vector2(0,1),new i.Vector2(-1,1)].map((function(t){return new o.Cell(t)})),h=new i.Vector2(0,1);break;case r.ShapeType.S:a=[new i.Vector2(0,0),new i.Vector2(1,0),new i.Vector2(0,1),new i.Vector2(-1,1)].map((function(t){return new o.Cell(t)}));break;case r.ShapeType.Z:a=[new i.Vector2(0,0),new i.Vector2(-1,0),new i.Vector2(0,1),new i.Vector2(1,1)].map((function(t){return new o.Cell(t)}));break;case r.ShapeType.T:a=[new i.Vector2(0,0),new i.Vector2(0,1),new i.Vector2(-1,1),new i.Vector2(1,1)].map((function(t){return new o.Cell(t)})),h=new i.Vector2(.5,1.5)}return new s.Shape(a,new i.Vector2(e.X,e.Y),n,h)},t}();e.ShapeFactory=h},808:(t,e)=>{var n;Object.defineProperty(e,"__esModule",{value:!0}),e.ShapeType=void 0,(n=e.ShapeType||(e.ShapeType={}))[n.I=0]="I",n[n.J=1]="J",n[n.L=2]="L",n[n.S=3]="S",n[n.Z=4]="Z",n[n.O=5]="O",n[n.T=6]="T"}},s={};function o(t){var e=s[t];if(void 0!==e)return e.exports;var n=s[t]={exports:{}};return i[t].call(n.exports,n,n.exports,o),n.exports}o.d=(t,e)=>{for(var n in e)o.o(e,n)&&!o.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),o.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e=o(352),n=o(215),r=o(540),t=new e.GameWorld(r.GAME_CONFIG.GAME_WIDTH,r.GAME_CONFIG.GAME_HEIGHT),function e(){t.gameOver||(t.update(),t.draw()),n.keyboard.reset(),requestAnimationFrame(e)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,